class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> freq=new HashMap<Integer, Integer>();
        for(int n:nums){
            if(freq.containsKey(n)){
                freq.put(n,freq.get(n)+1);
            }
            else{
                freq.put(n,1);
            }
        }
        // List<Map.Entry<Integer, Integer>> list=new LinkedList<Map.Entry<Integer,Integer>>(freq.entrySet());
        // Collections.sort(list,(o1,o2)->(o2.getValue()-o1.getValue()));
        // List<Integer> ans=new ArrayList<Integer>();
        // for(int i=0;i<k;i++){
        //     ans.add(list.get(i).getKey());
        // }
        List<Integer>[] buckets=new ArrayList[nums.length];
        for(int key:freq.keySet()){
            int fq=freq.get(key);
            if(buckets[fq-1]==null){
                buckets[fq-1]=new ArrayList<Integer>();
                buckets[fq-1].add(key);
            }
            else{
                buckets[fq-1].add(key);
            }
        }
        List<Integer> ans=new ArrayList<Integer>();
        for(int i=nums.length-1;i>=0 && ans.size()<k;i--){
            List<Integer> list=buckets[i];
            if(list!=null)
                ans.addAll(list);
        }
        return ans;
    }
}

Runtime: 14 ms, faster than 61.43% of Java online submissions for Top K Frequent Elements.
Memory Usage: 42.3 MB, less than 8.62% of Java online submissions for Top K Frequent Elements.

Using bucket sort would make the time complexity O(n), which is better than O(nlogn).

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> freq=new HashMap<>();
        for(int n:nums){
            int cnt=freq.getOrDefault(n,0);
            freq.put(n,cnt+1);
        }
        PriorityQueue<int[]> pq=new PriorityQueue<>(k,(o1,o2)->(o1[1]-o2[1]));
        for(int n:freq.keySet()){
            int cnt=freq.get(n);
            if(pq.size()==k){
                int[] top=pq.poll();
                if(cnt<top[1]){
                    pq.offer(top);
                    continue;
                }
            }
            pq.offer(new int[]{n,cnt});
        }
        int[] ans=new int[k];
        for(int i=0;i<k;i++){
            ans[i]=pq.poll()[0];
        }
        return ans;
    }
}

I use priorityqueue to sort the freqency, it is O(N+klogk). However, it is O(NlogN), for the case when k==N and every element in nums is unique.
The bucket sort idea is way better, it is suitable for problems whose value is within a limited range.