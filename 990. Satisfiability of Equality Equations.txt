class Solution {
    public class UnionFind{
        private int[] parent;
        private int[] sz;

        public UnionFind(int size) {
            parent = new int[size];
            sz = new int[size];
            for(int i = 0 ; i < size ; i ++) {
                parent[i] = i;
                sz[i] = 1;
            }
        }
        
        private int find(int p) {
            if(p < 0 || p >= parent.length) {
                throw new IllegalArgumentException("p is out of bound.");
            }
            while(p != parent[p]) {
                p = parent[p];
            }
            return p;
        }
        
        public boolean isConnected(int p, int q) {

            return find(p) == find(q);
        }

        public void union(int p, int q) {
            int pRoot = find(p);
            int qRoot = find(q);

            if(pRoot == qRoot) {
                return;
            }
            if(sz[pRoot] < sz[qRoot]) {
                parent[pRoot] = qRoot;
                sz[qRoot] += sz[pRoot];
            }else {
                parent[qRoot] = pRoot;
                sz[pRoot] += sz[qRoot];
            }
        }
    }
    public boolean equationsPossible(String[] equations) {
        Map<Character,Integer> map=new HashMap<Character,Integer>();
        int next=0;
        char l='i';
        char r='i';
        for(int i=0;i<equations.length;i++){
            l=equations[i].charAt(0);
            r=equations[i].charAt(3);
            if(map.get(l)==null){
                map.put(l,next);
                next++;
            }
            if(map.get(r)==null){
                map.put(r,next);
                next++;
            }
        }
        //union
        UnionFind equal=new UnionFind(next);
        int lIdx=0;
        int rIdx=0;
        for(int i=0;i<equations.length;i++){
            lIdx=map.get(equations[i].charAt(0));
            rIdx=map.get(equations[i].charAt(3));
            if(equations[i].charAt(1)=='='){
                equal.union(lIdx,rIdx);
            }
        }
        //find contradiction
        for(int i=0;i<equations.length;i++){
            lIdx=map.get(equations[i].charAt(0));
            rIdx=map.get(equations[i].charAt(3));
            if(equations[i].charAt(1)=='!'){
                if(equal.isConnected(lIdx,rIdx)){
                    return false;
                }
            }
        }
        return true;
    }
}

Runtime: 3 ms, faster than 40.69% of Java online submissions for Satisfiability of Equality Equations.
Memory Usage: 37.8 MB, less than 38.46% of Java online submissions for Satisfiability of Equality Equations.

Here is a better solution. The find() but not the whole UnionFind is needed, and the size can 
be defined as 26 considering that index of the variable is "e.charAt(0) - 'a'", so the map is 
not neccessary.
https://leetcode.com/problems/satisfiability-of-equality-equations/discuss/234486/JavaC%2B%2BPython-Easy-Union-Find