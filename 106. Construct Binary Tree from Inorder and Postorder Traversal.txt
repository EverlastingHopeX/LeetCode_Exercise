/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder.length==0){
            return null;
        }
        int cur=postorder[postorder.length-1];
        TreeNode root=new TreeNode(cur);
        int left=0;
        while(inorder[left]!=cur){
            left++;
        }
        if(left>0){
            root.left=buildTree(Arrays.copyOfRange(inorder,0,left),Arrays.copyOfRange(postorder,0,left));
        }
        if(left<inorder.length-1){
            root.right=buildTree(Arrays.copyOfRange(inorder,left+1,inorder.length),Arrays.copyOfRange(postorder,left,postorder.length-1));
        }
        return root;
    }
}

Runtime: 14 ms, faster than 12.90% of Java online submissions for Construct Binary Tree from Inorder and Postorder Traversal.
Memory Usage: 82.6 MB, less than 5.45% of Java online submissions for Construct Binary Tree from Inorder and Postorder Traversal.

Quite easy, but could be improved.