class Solution {
    class Interval{
        int start;
        int end;
        Interval(int s,int e){
            start=s;
            end=e;
        }
    }
    public int eraseOverlapIntervals(int[][] intervals) {
        if(intervals.length<=1){
            return 0;
        }
        Queue<Interval> pq=new PriorityQueue<Interval>(new Comparator<Interval>(){
            @Override
            public int compare(Interval i1, Interval i2){
                return i1.end-i2.end;
            }
        });
        for(int[] in:intervals){
            pq.offer(new Interval(in[0],in[1]));
        }
        int end=pq.peek().end;
        int count=1;
        while(pq.size()!=0){
            Interval i=pq.poll();
            if(i.start>=end){
                end=i.end;
                count++;
            }
        }
        
        return intervals.length-count;
    }
}

Runtime: 5 ms, faster than 65.41% of Java online submissions for Non-overlapping Intervals.
Memory Usage: 37.1 MB, less than 54.90% of Java online submissions for Non-overlapping Intervals.

Based on other's solution.
https://leetcode.com/problems/non-overlapping-intervals/discuss/91713/Java%3A-Least-is-Most

Still cannot solve this problem.
The idea is the same to find maximum non overlapping intervals, which is the interval scheduling problem.
First sort the intervals by ending time, and the count the intervals don't conflict. These are the maximum non overlapping intervals.
