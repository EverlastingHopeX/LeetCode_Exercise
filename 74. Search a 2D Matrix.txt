class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0 || matrix[0].length==0)
            return false;
        int lo=0;
        int hi=matrix.length-1;
        int mid=(lo+hi)/2;
        while(lo<=hi){
            // System.out.println(lo+","+hi);
            mid=(lo+hi)/2;
            if(matrix[mid][0]>target){
                hi=mid-1;
            }
            else if(matrix[mid][0]<target){
                lo=mid+1;
            }
            else{
                return true;
            }
        }
        if(hi<0){
            return false;
        }
        int r=hi;
        for(lo=0, hi=matrix[lo].length-1;lo<=hi;){
            // System.out.println(lo+","+hi);
            mid=(lo+hi)/2;
            if(matrix[r][mid]>target){
                hi=mid-1;
            }
            else if(matrix[r][mid]<target){
                lo=mid+1;
            }
            else{
                return true;
            }
        }
        return false;
    }
    
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Search a 2D Matrix.
Memory Usage: 43.1 MB, less than 5.05% of Java online submissions for Search a 2D Matrix.
Next challenges:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0 || matrix[0].length==0){
            return false;
        }
        int start=-1;
        while( start < matrix.length-1 && matrix[start+1][0]<=target){
            start++;
        }
        if(start==-1){
            return false;
        }
        return bisearch(matrix[start],target);
    }
    
    private boolean bisearch(int[] row, int target){
        // System.out.println("bisearch");
        int left=0;
        int right=row.length;
        while(left<right){
            int mid=left+(right-left)/2;
            if(row[mid]<target){
                left=mid+1;
            }
            else if(row[mid]>target){
                right=mid-1;
            }
            else{
                return true;
            }
        }
        if(left>= row.length || row[left]!=target){
            return false;
        }
        return true;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Search a 2D Matrix.
Memory Usage: 41.4 MB, less than 6.06% of Java online submissions for Search a 2D Matrix.

Although the performance is not worse compared with the first round, it still can be better to use 2 binary search.


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0 || matrix[0].length==0){
            return false;
        }
        int left=0,right=matrix.length;
        //left: max possible
        //right: min not possible
        while(left<right-1){
            // System.out.println(left+" "+right);
            int mid=left+(right-left)/2;
            if(matrix[mid][0]<target){
                left=mid;
            }
            else if(matrix[mid][0]>target){
                right=mid;
            }
            else{
                return true;
            }
        }
        int R=left;
        // System.out.println("R "+R);
        left=0;
        right=matrix[R].length;
        //left max possible
        //right min not possible
        while(left<right){
            // System.out.println(left+" "+right);
            int mid=left+(right-left)/2;
            if(matrix[R][mid]<target){
                left=mid+1;
            }
            else if(matrix[R][mid]>target){
                right=mid;
            }
            else{
                return true;
            }
        }
        
        return false;
    }
}

Runtime: 0 ms
Memory Usage: 38.1 MB

The key of binary serach is understand the two boundaries.