Not accepted as Time Limit Exceeded.

class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> ans=new ArrayList<Integer>();
        if(edges.length==0){
            ans.add(0);
            return ans;
        }
        int[] depth=new int[n];
        Map<Integer, List<Integer>> graph=new HashMap<>();
        for(int[] e:edges){
            if(!graph.containsKey(e[0])){
                graph.put(e[0], new ArrayList<Integer>());
            }
            if(!graph.containsKey(e[1])){
                graph.put(e[1], new ArrayList<Integer>());
            }
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }
        Set<Integer> leaves=new HashSet<Integer>();
        Iterator it=graph.entrySet().iterator();
        while(it.hasNext()){
            Map.Entry entry = (Map.Entry) it.next(); 
            Integer i=(Integer)entry.getKey();
            List<Integer> list=(List<Integer>)entry.getValue();
            if(list.size()==1){
                // System.out.println("leaf:"+i);
                leaves.add(i);
            }
        }
        int min=n;
        for(int i=0;i<n;i++){
            // System.out.println("depth["+i+"]");
            depth[i]=DFS(graph,leaves,i,i);
            // System.out.println(depth[i]);
            if(depth[i]<min){
                min=depth[i];
            }
        }
        for(int i=0;i<n;i++){
            if(depth[i]==min){
                ans.add(i);
            }
        }
        return ans;
    }
    
    private int DFS(Map<Integer, List<Integer>> graph, Set<Integer> leaves, int cur, int prev){
        List<Integer> children=graph.get(cur);
        Iterator<Integer> it=children.iterator();
        int max=0;
        int d=0;
        int child=0;
        while(it.hasNext()){
            child=it.next();
            if(child==prev){
                continue;
            }
            if(leaves.contains(child)){
                d=1;
            }
            else{
                d=DFS(graph, leaves, child,cur);
            }
            if(d>max){
                max=d;
            }
        }
        return max+1;
    }
}

A AC solution.
https://leetcode.com/problems/minimum-height-trees/discuss/76055/Share-some-thoughts

Come up with an algorithm which is similar to the previous one, which means I still could not solve this problem.

Other's solution, pretty easy to understand.
It keep removing the leaf nodes and where there is no node left, the previous layer is the answer.

https://leetcode.com/problems/minimum-height-trees/discuss/76129/Share-my-BFS-JAVA-code-using-degree-with-explanation-which-beats-more-than-95

class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if(edges.length==0){
            List<Integer> ans=new ArrayList<>();
            for(int i=0;i<n;i++){
                ans.add(i);
            }
            return ans;
        }
        
        int[] degree=new int[n];
        List<Integer>[] neighbor=new ArrayList[n];
        for(int i=0;i<n;i++){
            neighbor[i]=new ArrayList<>();
        }
        for(int[] e:edges){
            degree[e[0]]++;
            degree[e[1]]++;
            neighbor[e[0]].add(e[1]);
            neighbor[e[1]].add(e[0]);
        }
        Queue<Integer> curr=new LinkedList<>();
        for(int i=0;i<n;i++){
            if(degree[i]==1){
                curr.add(i);
            }
        }
        Queue<Integer> prev=new LinkedList<>();
        while(curr.size()>0){
            // System.out.println("---");
            prev.clear();
            int size=curr.size();
            for(int i=0;i<size;i++){
                int node=curr.poll();
                prev.offer(node);
                // System.out.println("remove "+node+" "+degree[node]);
                for(int nei:neighbor[node]){
                    degree[nei]--;
                    if(degree[nei]==1){
                        curr.offer(nei);
                    }
                }
            }
        }
        List<Integer> ans=new ArrayList<>(prev);
        return ans;
    }
}

Runtime: 9 ms	96.67%
Memory Usage: 43.1 MB

It becomes easier for me to solve this problem this time. The BFS method is easy to figure out, but took me some time to realize how to handle the last layer.

