/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum=0;
    
    public int rangeSumBST(TreeNode root, int L, int R) {
        DFS(L,R,root,null,null);
        return sum;
    }
    
    private void DFS(int L, int R, TreeNode cur, Integer min, Integer max){
        if(cur==null){
            return;
        }
        // System.out.println("cur "+cur.val+" min "+min+" max "+max);
        if(min!=null && min>=R){
            return;
        }
        if(max!=null && max<=L){
            return;
        }
        int cnt=0;
        if(cur.val>=L){
            DFS(L,R,cur.left,min,cur.val);
            cnt++;
        }
        if(cur.val<=R){
            DFS(L,R,cur.right,cur.val,max);
            cnt++;
        }
        if(cnt==2){
            // System.out.println("add "+cur.val);
            sum+=cur.val;
        }
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Range Sum of BST.
Memory Usage: 46.3 MB, less than 99.12% of Java online submissions for Range Sum of BST.


class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root==null){
            return 0;
        }
        int sum=0;
        if(root.val>low){
            sum+=rangeSumBST(root.left,low,high);
        }
        if(root.val<high){
            sum+=rangeSumBST(root.right,low,high);
        }
        if(root.val>=low && root.val<=high){
            sum+=root.val;
        }
        return sum;
    }
}

Runtime: 0 ms
Memory Usage: 47.5 MB

More concise than last time.