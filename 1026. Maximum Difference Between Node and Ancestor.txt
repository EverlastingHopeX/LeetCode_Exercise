/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxDif=0;
    
    public int maxAncestorDiff(TreeNode root) {
        if(root==null){
            return 0;
        }
        DFS(root,root.val,root.val);
        return maxDif;
    }
    
    private void DFS(TreeNode cur, int min, int max){
        min=Math.min(min,cur.val);
        max=Math.max(max,cur.val);
        int cnt=0;
        if(cur.left!=null){
            DFS(cur.left,min,max);
            cnt++;
        }
        if(cur.right!=null){
            DFS(cur.right,min,max);
            cnt++;
        }
        if(cnt==0){
            maxDif=Math.max(maxDif,max-min);
        }
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Difference Between Node and Ancestor.
Memory Usage: 39.9 MB, less than 81.94% of Java online submissions for Maximum Difference Between Node and Ancestor.