class Solution {
    public int countComponents(int n, int[][] edges) {
        int[] idx=new int[n];
        for(int i=0;i<n;i++){
            idx[i]=i;
        }
        int cnt=n;
        for(int[] e:edges){
            int p1=find(idx,e[0]);
            int p2=find(idx,e[1]);
            if(p1!=p2){
                idx[p2]=p1;
                cnt--;
            }
        }
        return cnt;
    }
    
    private int find(int[] idx, int t){
        int p=t;
        while(idx[p]!=p){
            p=idx[p];
        }
        idx[t]=p;
        return p;
    }
}

Runtime: 2 ms, faster than 81.79% of Java online submissions for Number of Connected Components in an Undirected Graph.
Memory Usage: 44 MB, less than 20.05% of Java online submissions for Number of Connected Components in an Undirected Graph.

Typical union find. The method without path compression will be a bit slower.