class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> li=new ArrayList<>();
        boolean inserted=false;
        int k=0;
        while(k<intervals.length && intervals[k][0]<=newInterval[0]){
            li.add(intervals[k++]);
        }
        li.add(newInterval);
        while(k<intervals.length){
            li.add(intervals[k++]);
        }
        int len=li.size();
        for(int i=0;i<li.size()-1;i++){
            //overlap
            if(li.get(i)[1]>=li.get(i+1)[0]){
                li.get(i+1)[0]=li.get(i)[0];
                li.get(i+1)[1]=Math.max(li.get(i+1)[1],li.get(i)[1]);
                li.get(i)[0]=-1;
                li.get(i)[1]=-1;
                len--;
            }
        }
        int[][] ans=new int[len][2];
        for(int i=0,j=0;i<len;i++,j++){
            while(li.get(j)[0]==-1){
                j++;
            }
            ans[i][0]=li.get(j)[0];
            ans[i][1]=li.get(j)[1];
        }
        return ans;
    }
}

Runtime: 4 ms, faster than 14.28% of Java online submissions for Insert Interval.
Memory Usage: 45 MB, less than 6.25% of Java online submissions for Insert Interval.

Can be improved by modifying the latter part while going through it.

Other's solution.
https://leetcode.com/problems/insert-interval/discuss/21602/Short-and-straight-forward-Java-solution