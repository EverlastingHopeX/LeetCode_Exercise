class Solution {
    public void rotate(int[][] matrix) {
        for(int i=0;i<matrix.length/2;i++){
            rotateLayer(matrix,i);
        }
    }
    
    private void rotateLayer(int[][] matrix, int layer){
        // System.out.println("layer "+layer);
        int n=matrix.length-2*layer;
        for(int i=0;i<n-1;i++){
            // System.out.println("swap "+matrix[layer][i+layer]+" "+matrix[i+layer][layer+n-1]);
            int temp=matrix[layer][i+layer];
            matrix[layer][i+layer]=matrix[i+layer][layer+n-1];
            matrix[i+layer][layer+n-1]=temp;
        }
        for(int i=0;i<n-1;i++){
            // System.out.println("swap "+matrix[layer][i+layer]+" "+matrix[n+layer-i-1][layer]);
            int temp=matrix[layer][i+layer];
            matrix[layer][i+layer]=matrix[n+layer-i-1][layer];
            matrix[n+layer-i-1][layer]=temp;
        }
        for(int i=0;i<n-1;i++){
            // System.out.println("swap "+matrix[layer+n-1][i+layer+1]+" "+matrix[i+layer+1][layer]);
            int temp=matrix[layer+n-1][i+layer+1];
            matrix[layer+n-1][i+layer+1]=matrix[i+layer+1][layer];
            matrix[i+layer+1][layer]=temp;
        }
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Rotate Image.
Memory Usage: 39.8 MB, less than 5.77% of Java online submissions for Rotate Image.

Kind of inpired by the onion model of OSS community I've be reading recently, which is interesting.