class MyHashMap {
    int buckets=1000;
    int itemsPerBuckets=1001;
    int[][] table;
    /** Initialize your data structure here. */
    public MyHashMap() {
        table=new int[buckets][];
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int hashkey=hash(key);
        if(table[hashkey]==null){
            table[hashkey]=new int[itemsPerBuckets];
            for(int i=0;i<itemsPerBuckets;i++){
                table[hashkey][i]=-1;
            }
        }
        table[hashkey][pos(key)]=value;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int hashkey=hash(key);
        if(table[hashkey]!=null){
            return table[hashkey][pos(key)];
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int hashkey=hash(key);
        if(table[hashkey]!=null){
            table[hashkey][pos(key)]=-1;
        }
    }
    
    private int hash(int key){
        return key%buckets;
    }
    
    private int pos(int key){
        return key/buckets;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */

Runtime: 66 ms, faster than 50.02% of Java online submissions for Design HashMap.
Memory Usage: 60.5 MB, less than 18.92% of Java online submissions for Design HashMap.