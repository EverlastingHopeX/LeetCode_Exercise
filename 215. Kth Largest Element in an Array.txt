class Solution {
    public int findKthLargest(int[] nums, int k) {
        List<Integer> list=new ArrayList<Integer>();
        for(int i=0;i<nums.length;i++){
            insert(nums[i], list);
        }
        return list.get(k-1);
    }
    
    private void insert(int num, List<Integer> list){
        if(list.size()==0 || num<list.get(list.size()-1)){
            list.add(num);
            return;
        }
        else if(num>list.get(0)){
            list.add(0,num);
            return;
        }
        //left: smaller index
        int left=0;
        int right=list.size()-1;
        int mid=0;
        while(left<=right){
            mid=(left+right)/2;
            if(num>list.get(mid)){
                right=mid-1;
            }               
            else if(num<list.get(mid)){
                left=mid+1;
            }
            else{
                list.add(mid,num);
                return;
            }
        }
        list.add(left,num);
    }
}

Runtime: 8 ms, faster than 46.63% of Java online submissions for Kth Largest Element in an Array.
Memory Usage: 36.7 MB, less than 94.26% of Java online submissions for Kth Largest Element in an Array.

class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length-k];
    }
}

Runtime: 3 ms, faster than 77.94% of Java online submissions for Kth Largest Element in an Array.
Memory Usage: 37.3 MB, less than 90.16% of Java online submissions for Kth Largest Element in an Array.

It's not a shame to use libraries, however, it provides no benefit.