class TwoSum {
    Map<Integer, Boolean> num;
    
    /** Initialize your data structure here. */
    public TwoSum() {
        num=new HashMap<Integer, Boolean>();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        if(num.containsKey(number)){
            num.put(number,true);
        }
        else{
            num.put(number,false);
        }
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        Iterator<Integer> it=num.keySet().iterator();
        while(it.hasNext()){
            int p1=it.next();
            int p2=value-p1;
            if(num.containsKey(p2)){
                if(p2!=p1){
                    return true;
                }
                else if(num.get(p1)){
                    return true;
                }
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */

Runtime: 92 ms, faster than 71.81% of Java online submissions for Two Sum III - Data structure design.
Memory Usage: 47 MB, less than 70.95% of Java online submissions for Two Sum III - Data structure design.

Got TLE first time, and the solution provided by other mentioned that there is more add than find, so I change it to this version.

Other's solution.
https://leetcode.com/problems/two-sum-iii-data-structure-design/discuss/52005/Trade-off-in-this-problem-should-be-considered