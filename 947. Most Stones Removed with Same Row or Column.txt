Didn't work it out.
This is the solution based on other's, with a little modification for better understanding.
class Solution {
    Map<Integer, Integer> id= new HashMap<>();
    int islands = 0;

    public int removeStones(int[][] stones) {
        for(int[] st:stones){
            union(st[0],~st[1]);
        }
        return stones.length-islands;
    }
    
    //union row and col
    private void union(int x, int y){
        int px=find(x);
        int py=find(y);
        //not connected before
        if(px!=py){
            id.put(px,py);
            islands--;
        }
    }
    
    //return x's parent
    private int find(int x){
        //this line hasn't appeared
        if(id.putIfAbsent(x,x)==null){
            islands++;
        }
        //find the deepest root(parent)
        if(x!=id.get(x)){
            id.put(x,find(id.get(x)));
        }
        return id.get(x);
    }
}

Other's solution. When stones are connected, they can always be removed until there is only one left 
(like going a path through these stones). So the most stones to be removed will be the number of stones minus 
number of connected stone groups (islands).
Also he unified indexs through giving unique indexs to rows and cols, then union them. So when a new stone 
comes up, it unions the row and col, and when another stone connected to this comes up, another row or col is 
unioned with former one. Clearly, the islands we found is actually connected rows and cols rather than points. 
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/discuss/197668/Count-the-Number-of-Islands-O(N)
