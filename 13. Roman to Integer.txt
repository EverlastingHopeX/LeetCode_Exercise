class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map=new HashMap<>();
        init(map);
        int ans=0;
        for(int i=0;i<s.length();i++){
            int n=map.get(s.charAt(i));
            if(i+1<s.length()){
                int m=map.get(s.charAt(i+1));
                if(m>n){
                    ans=ans+m-2*n;
                    i++;
                }
            }
            ans+=n;
        }
        
        return ans;
    }
    
    private void init(Map<Character,Integer> map){
        map.put('I',1);
        map.put('V',5);
        map.put('X',10);
        map.put('L',50);
        map.put('C',100);
        map.put('D',500);
        map.put('M',1000);
    }
}

Runtime: 5 ms, faster than 63.89% of Java online submissions for Roman to Integer.
Memory Usage: 41.3 MB, less than 5.48% of Java online submissions for Roman to Integer.

Pretty easy compared with convert int to roman.

class Solution {
    public int romanToInt(String s) {
        Map<Character,Integer> r2i=new HashMap<>();
        initMap(r2i);
        int prev=1000;
        int ans=0;
        for(int i=0;i<s.length();i++){
            int k=r2i.get(s.charAt(i));
            if(prev<k){
                ans=ans-2*prev;
            }
            ans+=k;
            prev=k;
        }
        return ans;
    }
    
    private void initMap(Map<Character,Integer> map){
        map.put('I',1);
        map.put('V',5);
        map.put('X',10);
        map.put('L',50);
        map.put('C',100);
        map.put('D',500);
        map.put('M',1000);
    }
}

Same performance but more readable.