class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map=new HashMap<String, Integer>();
        for(String w:words){
            if(map.containsKey(w)){
                map.put(w,map.get(w)+1);
            }
            else{
                map.put(w,1);
            }
        }
        List<Map.Entry<String, Integer>> list=new LinkedList<Map.Entry<String, Integer>>();
        list.addAll(map.entrySet());
        Collections.sort(list,(o1,o2)->{
            int comp=o2.getValue().compareTo(o1.getValue());
            if(comp==0){
                comp=o1.getKey().compareTo(o2.getKey());
            }
            return comp;
            });
        List<String> ans=new ArrayList<String>();
        for(int i=0;i<k;i++){
            // System.out.println(list.get(i).getKey()+" : "+list.get(i).getValue());
            ans.add(list.get(i).getKey());
        }
        return ans;
    }
}

Runtime: 8 ms, faster than 42.42% of Java online submissions for Top K Frequent Words.
Memory Usage: 39 MB, less than 67.86% of Java online submissions for Top K Frequent Words.