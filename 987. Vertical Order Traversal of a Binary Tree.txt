/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    class Point{
        int y;
        int val;
        Point(int v, int yy){
            this.y=yy;
            this.val=v;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        Map<Integer, List<Point>> map=new TreeMap<>();
        List<Point> list=new ArrayList<Point>();
        list.add(new Point(root.val,0));
        map.put(0,list);
        if(root.left!=null){
            DFS(root.left,-1,1,map);
        }
        if(root.right!=null){
            DFS(root.right,1,1,map);
        }
        Iterator it=map.values().iterator();
        while(it.hasNext()){
            list=(List<Point>)it.next();
            Collections.sort(list, new Comparator<Point>(){
                @Override
                public int compare(Point p1, Point p2){
                    if(p1.y<p2.y){
                        return -1;
                    }
                    else if(p1.y==p2.y){
                        if(p1.val<p2.val){
                            return -1;
                        }
                        else{
                            return 1;
                        }
                    }
                    else{
                        return 1;
                    }
                }
            });
            List<Integer> rlist=new ArrayList<Integer>();
            for(Point p:list){
                rlist.add(p.val);
            }
            ans.add(rlist);
        }
        return ans;
    }
    
    private void DFS(TreeNode root, int x, int y, Map<Integer, List<Point>> map){
        // System.out.println(root.val+", "+x);
        if(!map.containsKey(x)){
            List<Point> list=new ArrayList<Point>();
            list.add(new Point(root.val,y));
            map.put(x,list);
        }
        else{
            List<Point> list=map.get(x);
            list.add(new Point(root.val,y));
        }
        if(root.left!=null){
            DFS(root.left,x-1,y+1,map);
        }
        if(root.right!=null){
            DFS(root.right,x+1,y+1,map);
        }
    }
}

Runtime: 3 ms, faster than 75.32% of Java online submissions for Vertical Order Traversal of a Binary Tree.
Memory Usage: 36.4 MB, less than 100.00% of Java online submissions for Vertical Order Traversal of a Binary Tree.

Much better than my first round.