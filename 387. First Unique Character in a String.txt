class Solution {
    public int firstUniqChar(String s) {
        int[] first=new int[26];
        Arrays.fill(first,-1);
        for(int i=0;i<s.length();i++){
            int p=s.charAt(i)-'a';
            if(first[p]==-1){
                first[p]=i;
            }
            else if(first[p]==s.length()){
                continue;
            }
            else{
                first[p]=s.length();
            }
        }
        int min=s.length();
        int i=-1;
        for(int fi:first){
            i++;
            if(fi==-1 || fi==s.length()){
                continue;
            }
            // System.out.println(i+fi);
            min=Math.min(min,fi);
        }
        return min==s.length()?-1:min;
    }
}

Runtime: 6 ms, faster than 83.88% of Java online submissions for First Unique Character in a String.
Memory Usage: 40 MB, less than 50.17% of Java online submissions for First Unique Character in a String.

I thought using hashmap would be faster, but it actually increase the cost.