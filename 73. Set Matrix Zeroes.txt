class Solution {
    public void setZeroes(int[][] matrix) {
        Set<Integer> row=new HashSet<>();
        Set<Integer> col=new HashSet<>();
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==0){
                    row.add(i);
                    col.add(j);
                }
            }
        }
        for(int r:row){
            for(int i=0;i<matrix[0].length;i++){
                matrix[r][i]=0;
            }
        }
        for(int c:col){
            for(int i=0;i<matrix.length;i++){
                matrix[i][c]=0;
            }
        }
    }
}

Runtime: 2 ms, faster than 35.25% of Java online submissions for Set Matrix Zeroes.
Memory Usage: 41.1 MB, less than 98.57% of Java online submissions for Set Matrix Zeroes.

O(m+n) space solution is easy.
O(1) is kind of tricky.

class Solution {
    public void setZeroes(int[][] matrix) {
        Set<Integer> row=new HashSet<>();
        Set<Integer> col=new HashSet<>();
        boolean firstRowZero=false;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==0){
                    if(i==0){
                        firstRowZero=true;
                    }
                    else{
                        matrix[i][0]=0;
                    }
                    matrix[0][j]=0;
                }
            }
        }
        for(int i=1;i<matrix.length;i++){
            if(matrix[i][0]==0){
                for(int j=0;j<matrix[0].length;j++){
                    matrix[i][j]=0;
                }
            }
        }
        for(int i=0;i<matrix[0].length;i++){
            if(matrix[0][i]==0){
                for(int j=0;j<matrix.length;j++){
                    matrix[j][i]=0;
                }
            }
        }
        if(firstRowZero){
            for(int i=0;i<matrix[0].length;i++){
                matrix[0][i]=0;
            }
        }
    }
}

Runtime: 1 ms, faster than 95.08% of Java online submissions for Set Matrix Zeroes.
Memory Usage: 41 MB, less than 98.57% of Java online submissions for Set Matrix Zeroes.

Need an additional boolean to memorize if there is 0 in first row, so matrix[0][0] can be used to mark if there is 0 in first col and won't cause ambiguity.