class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closest=nums[0]+nums[1]+nums[2];
        for(int i=0;i<nums.length-2;i++){
            // System.out.println("i: "+nums[i]);
            int lo=i+1;
            int hi=nums.length-1;
            int sum=nums[i]+nums[lo]+nums[hi];
            while(lo<hi){
                // System.out.println("lo: "+nums[lo]+" hi: "+nums[hi]);
                sum=nums[i]+nums[lo]+nums[hi];
                // System.out.println("sum: "+sum);
                if(Math.abs(sum-target)<Math.abs(closest-target)){
                    closest=sum;
                }
                if(sum==target){
                    return target;
                }
                else if(sum<target){
                    lo++;
                }
                else{
                    hi--;
                }
            }
        }
        return closest;
    }
}

Runtime: 4 ms, faster than 96.12% of Java online submissions for 3Sum Closest.
Memory Usage: 36.4 MB, less than 100.00% of Java online submissions for 3Sum Closest.

This solution is based on 15. 3Sum. The runtime is satisfying, however, could be improved by 
skipping duplicate elements.

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        // if(nums.length<3){
        //     return -1;
        // }
        int ans=nums[0]+nums[1]+nums[2];
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
            int left=i+1;
            int right=nums.length-1;
            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];
                // System.out.println("sum "+sum);
                if(Math.abs(target-sum)<Math.abs(target-ans)){
                    ans=sum;
                }
                if(sum==target){
                    break;
                }
                else if(sum<target){
                    left++;
                }
                else{
                    right--;
                }
            }
        }
        return ans;
    }
}

Runtime: 6 ms, faster than 44.41% of Java online submissions for 3Sum Closest.
Memory Usage: 36.7 MB, less than 100.00% of Java online submissions for 3Sum Closest.

Not much difference between this and the solution in first round.

Similar solution in the third round, but the performance is slightly slower.