/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        List<Integer> list=new ArrayList<Integer>();
        DFS(root,sum,0,list,ans);
        return ans;
    }
    
    private void DFS(TreeNode root, int sum, int curSum, List<Integer> list, List<List<Integer>>ans){
        list.add(root.val);
        // System.out.println("curSum: "+curSum);
        // System.out.println("root: "+root.val);
        
        if(root.left!=null){
            DFS(root.left,sum,curSum+root.val,list,ans);
        }
        if(root.right!=null){
            DFS(root.right,sum,curSum+root.val,list,ans);
        }
        if(root.left==null && root.right==null){
            if(curSum+root.val==sum){
                // System.out.println("found");
                ans.add(new ArrayList<Integer>(list));
            }
        }
        list.remove(list.size()-1);
    }
}

Runtime: 1 ms, faster than 100.00% of Java online submissions for Path Sum II.
Memory Usage: 37.4 MB, less than 100.00% of Java online submissions for Path Sum II.

Much better than first round.