class Solution {
    Map<String, String> unionMap;
    
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        unionMap=new HashMap<>();
        for(List<String> acc:accounts){
            String name=acc.get(0);
            union(acc.get(1)+","+name,acc.get(1)+","+name);
            for(int i=2;i<acc.size();i++){
                union(acc.get(i-1)+","+name,acc.get(i)+","+name);
            }
        }
        
        Map<String, List<String>> accMap=new HashMap<>();
        for(String acc:unionMap.keySet()){
            String p=find(acc);
            // System.out.println(acc+" to "+p);
            List<String> li=accMap.getOrDefault(p,new ArrayList<>());
            String str=acc.split(",")[0];
            li.add(str);
            accMap.put(p,li);
        }
        List<List<String>> ans=new ArrayList<>();
        for(String acc:accMap.keySet()){
            List<String> accs=new ArrayList<>();
            String name=acc.split(",")[1];
            accs.add(name);
            List<String> li=accMap.get(acc);
            Collections.sort(li);
            accs.addAll(li);
            ans.add(accs);
        }
        return ans;
    }
    
    private void union(String acc1, String acc2){
        // System.out.println("union "+acc1+" | "+acc2);
        String p1=find(acc1);
        String p2=find(acc2);
        // System.out.println(p1+" | "+p2);
        if(!p1.equals(p2)){
            unionMap.put(p2,p1);
        }
        // p1=find(acc1);
        // p2=find(acc2);
        // System.out.println("after union "+p1+" | "+p2);
    }
    
    private String find(String acc){
        // System.out.print("find "+acc);
        unionMap.putIfAbsent(acc,acc);
        while(!acc.equals(unionMap.get(acc))){
            // System.out.println(" "+acc);
            acc=unionMap.get(acc);
        }
        // System.out.println(" "+acc);
        return acc;
    }
}

Runtime: 163 ms, faster than 8.09% of Java online submissions for Accounts Merge.
Memory Usage: 47 MB, less than 37.70% of Java online submissions for Accounts Merge.

This solution will pass but the performance is not satisfying.

Another union find solution. Performance improved (62ms). (37ms with path compression)
https://leetcode.com/problems/accounts-merge/discuss/109157/JavaC%2B%2B-Union-Find

O(A^2) without path compression and rank. O(AlogA) with path compression and rank. 