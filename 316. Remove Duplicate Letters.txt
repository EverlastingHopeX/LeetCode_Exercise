Tried DFS, got TLE.
Couldn't think a way to improve the DFS.

Other's O(N) solution.
The idea is to pick the letter of the optimal result one by one from start to end.
For s (0,N), we can find a index x, where s(x,N) contains all unique letters while s(x+1,N) not. Asume the smallest letter in s(0,x) is letter k who first appear at position pos, then k is the best choice to be the first letter.
First of all, for current state, the first letter can not be at position (x+1,N), since the next letter will be picked at the position after this one and s[x] will appear in (x+1,N). While for (0,x), why we pick pos? s[pos] is the smallest letter in (0,x), if we pick any letter other than s[pos] to be the first letter, the result will eventually larger than result starts with s[pos] (And if there are letters smaller than s[pos], they are either before 0 or after x). The letter s[pos] may appear multiple times in (0,x), for example, pos0 and pos1. If the result can be formed with pos1, it means the next first letter is after pos1, then it can also be formed with pos0. However, if the result is formed with pos0, then it can not be possible to be formed with pos1 if the next first letter is in (pos0,pos1).
For each step, we ensure that we find the optimal first letter, then we find the best result overall. (If we have "ApB" and "AqC", if p is the optimal kth letter while q is not, then q is larger than p, then "AqC" is larger than "AqC")


https://leetcode.com/problems/remove-duplicate-letters/discuss/76768/A-short-O(n)-recursive-greedy-solution
