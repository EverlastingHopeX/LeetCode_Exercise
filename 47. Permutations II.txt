class Solution {
    List<List<Integer>> ans=new ArrayList<>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        boolean[] taken=new boolean[nums.length];
        func(nums, taken, new ArrayList<Integer>());
        return ans;
    }
    
    private void func(int[] nums, boolean[] taken, List<Integer> cur){
        if(cur.size()==nums.length){
            List<Integer> temp=new ArrayList<>();
            temp.addAll(cur);
            ans.add(temp);
            return;
        }
        Integer prev=null;
        for(int i=0;i<taken.length;i++){
            if(prev!=null && nums[i]==prev){
                // System.out.println(i+" skipped");
                continue;
            }
            if(!taken[i]){
                cur.add(nums[i]);
                taken[i]=true;
                func(nums,taken,cur);
                cur.remove(cur.size()-1);
                taken[i]=false;
                prev=nums[i];
            }
        }
    }
}

Runtime: 2 ms, faster than 51.44% of Java online submissions for Permutations II.
Memory Usage: 40.5 MB, less than 34.33% of Java online submissions for Permutations II.

Integer and null is quite convenient to use compared with int which doesn't have an legal invalid value.

The performance is acceptable.