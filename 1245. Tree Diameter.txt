class Solution {
    public int treeDiameter(int[][] edges) {
        Map<Integer,List<Integer>> adjMap=new HashMap<>();
        Map<Integer,Integer> degree=new HashMap<>();
        for(int[] e:edges){
            List<Integer> li=adjMap.getOrDefault(e[0],new ArrayList<>());
            li.add(e[1]);
            adjMap.put(e[0],li);
            degree.put(e[0],degree.getOrDefault(e[0],0)+1);
            li=adjMap.getOrDefault(e[1],new ArrayList<>());
            li.add(e[0]);
            adjMap.put(e[1],li);
            degree.put(e[1],degree.getOrDefault(e[1],0)+1);
        }
        int len=-1;
        Queue<Integer> nodes=new LinkedList<>();
        for(int node:degree.keySet()){
            if(degree.get(node)==1){
                nodes.offer(node);
            }
        }
        int size=0;
        while(nodes.size()>0){
            // System.out.println("len "+len);
            size=nodes.size();
            for(int i=0;i<size;i++){
                int node=nodes.poll();
                List<Integer> li=adjMap.get(node);
                for(int next:li){
                    int d=degree.get(next);
                    if(d>1){
                        if(d==2){
                            nodes.offer(next);
                        }
                        degree.put(next,d-1);
                    }
                }
            }
            len++;
        }
        int t=0;
        if(size>1){
            t=(size+1)/2;
        }
        return len*2+t;
    }
}

Runtime: 20 ms, faster than 26.11% of Java online submissions for Tree Diameter.
Memory Usage: 44.1 MB, less than 7.67% of Java online submissions for Tree Diameter.

BFS from leaf.
O(N), N is number of edges. By going from outer layer into inner layer, we only need to visit each edge twice from its two end points.