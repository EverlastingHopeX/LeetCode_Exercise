class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length<=1){
            return 0;
        }
        int n=prices.length;
        int[] min=new int[n];
        min[0]=prices[0];
        int max=0;
        for(int i=1;i<n;i++){
            min[i]=prices[i];
            int t=prices[i]-min[i-1];
            if(t>0){
                min[i]=min[i-1];
                if(t>max){
                    max=t;
                }
            }
        }
        
        return max;
    }
}

Runtime: 1 ms, faster than 88.78% of Java online submissions for Best Time to Buy and Sell Stock.
Memory Usage: 37.4 MB, less than 100.00% of Java online submissions for Best Time to Buy and Sell Stock.

This solution is inspired by refered solution in 53.

class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null || prices.length<=1){
            return 0;
        }
        int profit=0;
        int min=prices[0];
        for(int i=0;i<prices.length;i++){
            if(prices[i]<min){
                min=prices[i];
            }
            else{
                profit=Math.max(profit,prices[i]-min);
            }
        }
        return profit;
    }
}


The similar idea as the previous solution but the logic is more clear.
Pretty easy after dealing with the 53.

class Solution {
    public int maxProfit(int[] prices) {
        Stack<Integer> st=new Stack<>();
        int[] nextLarger=new int[prices.length];
        for(int i=0;i<prices.length;i++){
            nextLarger[i]=i;
            while(!st.isEmpty()){
                int top=st.peek();
                if(prices[top]<prices[i]){
                    st.pop();
                    nextLarger[top]=i;
                }
                else{
                    break;
                }
            }
            st.push(i);
        }
        int max=0;
        for(int i=0;i<nextLarger.length;i++){
            int t=findNextMax(nextLarger,i);
            if(t==i){
                continue;
            }
            max=Math.max(max,prices[t]-prices[i]);
        }
        return max;
    }
    
    private int findNextMax(int[] nextLarger, int i){
        if(nextLarger[i]==i){
            return i;
        }
        int t=findNextMax(nextLarger,nextLarger[i]);
        nextLarger[i]=t;
        return t;
    }
}

Runtime: 4 ms
Memory Usage: 39.3 MB

Overcomplexed the problem this time.