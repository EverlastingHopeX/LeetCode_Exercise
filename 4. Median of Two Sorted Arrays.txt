class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        Stack<Integer> stack=new Stack<Integer>();
        int m=nums1.length;
        int n=nums2.length;
        int i=0;
        int j=0;
        while(i+j<=(m+n)/2){
            if(i==m || j==n){
                if(i==m){
                    stack.push(nums2[j]);
                    j++;
                }
                else{
                    stack.push(nums1[i]);
                    i++;
                }
            }
            else{
                if(nums1[i]<nums2[j]){
                    stack.push(nums1[i]);
                    i++;
                }
                else{
                    stack.push(nums2[j]);
                    j++;
                }
            }
        }
        //odd
        if((m+n)%2!=0){
            return stack.pop();
        }
        //even
        else{
            return (stack.pop()+stack.pop())/2.0;
        }
    }
}

Runtime: 5 ms, faster than 13.54% of Java online submissions for Median of Two Sorted Arrays.
Memory Usage: 46.9 MB, less than 88.23% of Java online submissions for Median of Two Sorted Arrays.

This solution's time complexity should be O(M+N), not O(log(M+N)) as required.

This link is the solution with O(log(min(M,N))).
https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2481/Share-my-O(log(min(mn)))-solution-with-explanation

Couldn't solve this at the second time. 
Spent a lot of time trying to figure out a O(logN) solution based on binary search, didn't work it out. Then tried to figure out O(N), also didn't work it out.

Another Java O(logN) binary search solution.
My idea is kind of similar to this one, however, the hardest part is not to find the math basis for the algorithm, but to handle the boundary properly. Understanding the mechanism of this solution is not that hard for me, but I doubt that I can implement it correctly in an interview.

https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2496/Concise-JAVA-solution-based-on-Binary-Search