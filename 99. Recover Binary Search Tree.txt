/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void recoverTree(TreeNode root) {
        List<TreeNode> list=new LinkedList<TreeNode>();
        Stack<TreeNode> stack=new Stack<TreeNode>();
        TreeNode cur=root;
        while(cur!=null || !stack.empty()){
            while(cur!=null){
                stack.push(cur);
                cur=cur.left;
            }
            cur=stack.pop();
            list.add(cur);
            cur=cur.right;
        }
        int t1=-1;
        int t2=list.size()-1;
        for(int i=0;i<list.size();i++){
            if(list.get(i).val>list.get(i+1).val){
                t1=i;
                break;
            }
        }
        for(int i=t1+1;i<list.size();i++){
            if(list.get(i).val>list.get(t1).val){
                t2=i-1;
                break;
            }
        }
        // System.out.println(t1+":"+t2);
        int temp=list.get(t1).val;
        list.get(t1).val=list.get(t2).val;
        list.get(t2).val=temp;
    }
}

Runtime: 5 ms, faster than 9.77% of Java online submissions for Recover Binary Search Tree.
Memory Usage: 39.7 MB, less than 80.77% of Java online submissions for Recover Binary Search Tree

The straight forward solution cause less space and more time.
However, Morris Traversal doesn't seem to be something practical in real life.
