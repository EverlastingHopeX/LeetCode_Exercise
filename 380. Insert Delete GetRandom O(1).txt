class RandomizedSet {

    Set<Integer> set;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        set=new HashSet<Integer>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(set.contains(val)){
            return false;
        }
        set.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!set.contains(val)){
            return false;
        }
        set.remove(val);
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        int cnt=(int) (Math.random()*set.size());
        // System.out.println(cnt);
        int ans=-1;
        for(int i:set){
            if(cnt==0){
                ans=i;
            }
            cnt--;
        }
        return ans;
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */

Runtime: 106 ms, faster than 9.89% of Java online submissions for Insert Delete GetRandom O(1).
Memory Usage: 47.7 MB, less than 46.00% of Java online submissions for Insert Delete GetRandom O(1).

