class Solution {
    // Map<Integer, Set<String>> sums=new HashMap<>();
    List<List<Integer>> ans=new ArrayList<>();
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        func(candidates,0,target, 0, new ArrayList<Integer>());
        
        return ans;
    }
    
    private void func(int[] candidates, int idx, int target, int sum, List<Integer> li){
        // System.out.println("sum "+sum);
        // System.out.println(li.size());
        // System.out.println("add "+candidates[idx]);
        if(sum==target){
            List<Integer> temp=new ArrayList<>();
            temp.addAll(li);
            ans.add(temp);
        }
        else if(sum<target){
            for(int next=idx;next<candidates.length;next++){
                li.add(candidates[next]);
                func(candidates, next, target, sum+candidates[next],li);
                li.remove(li.size()-1);
            }
        }
    }
}

Runtime: 5 ms, faster than 39.07% of Java online submissions for Combination Sum.
Memory Usage: 39.8 MB, less than 13.34% of Java online submissions for Combination Sum

Brute force solution. Using stack instead of list won't bring much improvement, and it can actually cost more time.

Other's dp solution. I knew there can be a DP solution, but didn't work it out. However, I start to know which kinds of problems can be solved by DP, it is a big progress for me.

https://leetcode.com/problems/combination-sum/discuss/16509/Iterative-Java-DP-solution


class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>>[] dp=new ArrayList[target+1];
        Arrays.sort(candidates);
        for(int cand:candidates){
            if(cand>target){
                break;
            }
            dp[cand]=new ArrayList<>();
            List<Integer> li=new ArrayList<>();
            li.add(cand);
            dp[cand].add(li);
        }
        for(int i=1;i<=target;i++){
            if(dp[i]==null){
                dp[i]=new ArrayList<>();
            }
            for(int cand:candidates){
                int t=i-cand;
                if(t<=0){
                    break;
                }
                if(dp[t]==null){
                    continue;
                }
                for(List<Integer> list:dp[t]){
                    if(list.get(list.size()-1)>cand){
                        continue;
                    }
                    List<Integer> nlist=new ArrayList<>(list);
                    nlist.add(cand);
                    dp[i].add(nlist);
                }
            }
        }
        return dp[target];
    }
}

Runtime: 5 ms	45.17%
Memory Usage: 39.3 MB	93.77%

Solve this with dp easily this time. The transition is clear so it naturally comes to DP.
Didn't sort the array at first, then sort it for early breaks.


