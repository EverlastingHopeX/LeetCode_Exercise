class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int[] dp=new int[n];
        int i=0;
        for(List<Integer> row:triangle){
            // System.out.println("level "+i);
            for(int j=row.size()-1;j>=0;j--){
                dp[j]=getMin(dp,j,i)+row.get(j);
                // System.out.println(dp[j]);
            }
            i++;
        }
        int min=dp[0];
        for(i=0;i<n;i++){
            min=Math.min(min,dp[i]);
        }
        return min;
    }
    
    private int getMin(int[] dp, int j, int size){
        // System.out.println("j "+j);
        if(j==0){
            return dp[j];
        }
        else if(j==size){
            return dp[j-1];
        }
        return Math.min(dp[j],dp[j-1]);
    }
}

Runtime: 1 ms, faster than 97.85% of Java online submissions for Triangle.
Memory Usage: 39.1 MB, less than 8.16% of Java online submissions for Triangle.

The way it describe n feels like a misleading, which is pretty interesting.