/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null){
            return false;
        }
        if(root.left==null && root.right==null){
            if(root.val==sum){
                return true;
            }
            return false;
        }
        boolean ans=false;
        if(root.left!=null){
            ans|=hasPathSum(root.left,sum-root.val);
        }
        if(root.right!=null){
            ans|=hasPathSum(root.right,sum-root.val);
        }
        return ans;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Path Sum.
Memory Usage: 39.6 MB, less than 5.88% of Java online submissions for Path Sum.

The recursive solution is pretty easy.