/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            return null;
        }
        ListNode cur=lists[0];
        for(int i=1;i<lists.length;i++){
            cur=merge(cur,lists[i]);
        }
        return cur;
    }
    
    private ListNode merge(ListNode fst, ListNode snd){
        ListNode dummy=new ListNode(0);
        ListNode cur=dummy;
        while(fst!=null && snd!=null){
            if(fst.val<=snd.val){
                cur.next=fst;
                fst=fst.next;
            }
            else{
                cur.next=snd;
                snd=snd.next;
            }
            cur=cur.next;
        }
        cur.next=fst==null?snd:fst;
        return dummy.next;
    }
}

Runtime: 123 ms, faster than 14.45% of Java online submissions for Merge k Sorted Lists.
Memory Usage: 57.1 MB, less than 5.47% of Java online submissions for Merge k Sorted Lists.

My solution is quite brute, priorityqueue is one way to reduce time complexity to O(nlogk), 
where k is size of lists.

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode dummy=new ListNode();
        ListNode cur=dummy;
        PriorityQueue<ListNode> pq=new PriorityQueue<>((o1,o2)->(o1.val-o2.val));
        for(ListNode node:lists){
            if(node==null){
                continue;
            }
            pq.offer(node);
        }
        while(!pq.isEmpty()){
            ListNode t=pq.poll();
            cur.next=t;
            if(t.next!=null){
                pq.offer(t.next);
            }
            cur=cur.next;
        }
        return dummy.next;
    }
}

Pretty easy in the second round. Came up with the PriorityQueue solution instantly, and figure out the time complexity correctly.
