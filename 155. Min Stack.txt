class MinStack {
    List<Integer> st;
    int min;
    /** initialize your data structure here. */
    public MinStack() {
        st=new LinkedList<Integer>();
    }
    
    public void push(int x) {
        // System.out.println("push "+x);
        st.add(x);
        if(min == -1 || x<st.get(min)){
            min=st.size()-1;
        }
    }
    
    public void pop() {
        // System.out.println("pop");
        if(st.size()>1){
            st.remove(st.size()-1);
            if(min==st.size()){
                min=0;
                for(int i=1;i<st.size();i++){
                    if(st.get(i)<st.get(min)){
                        min=i;
                    }
                }
            }
        }
        else if(st.size()==1){
            min=-1;
            st.remove(0);
        }
    }
    
    public int top() {
        // System.out.println("top");
        if(st.size()==0){
            return -1;
        }
        return st.get(st.size()-1);
    }
    
    public int getMin() {
        // System.out.println("getMin");
        return min>=0?st.get(min):-1;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

Runtime: 5 ms, faster than 80.93% of Java online submissions for Min Stack.
Memory Usage: 40 MB, less than 34.06% of Java online submissions for Min Stack.