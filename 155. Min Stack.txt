class MinStack {
    List<Integer> st;
    int min;
    /** initialize your data structure here. */
    public MinStack() {
        st=new LinkedList<Integer>();
    }
    
    public void push(int x) {
        // System.out.println("push "+x);
        st.add(x);
        if(min == -1 || x<st.get(min)){
            min=st.size()-1;
        }
    }
    
    public void pop() {
        // System.out.println("pop");
        if(st.size()>1){
            st.remove(st.size()-1);
            if(min==st.size()){
                min=0;
                for(int i=1;i<st.size();i++){
                    if(st.get(i)<st.get(min)){
                        min=i;
                    }
                }
            }
        }
        else if(st.size()==1){
            min=-1;
            st.remove(0);
        }
    }
    
    public int top() {
        // System.out.println("top");
        if(st.size()==0){
            return -1;
        }
        return st.get(st.size()-1);
    }
    
    public int getMin() {
        // System.out.println("getMin");
        return min>=0?st.get(min):-1;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

Runtime: 5 ms, faster than 80.93% of Java online submissions for Min Stack.
Memory Usage: 40 MB, less than 34.06% of Java online submissions for Min Stack.

class MinStack {

    class Node{
        int val;
        Node next;
        
        Node(int val){
            this.val=val;
            next=null;
        }
    }
    
    Node top;
    Node min;
    
    /** initialize your data structure here. */
    public MinStack() {
        top=null;
        min=null;
    }
    
    public void push(int x) {
        Node p=new Node(x);
        p.next=top;
        top=p;
        if(min==null){
            min=p;
        }
        else{
            if(p.val<min.val){
                min=p;
            }
        }
    }
    
    public void pop() {
        if(min==top){
            min=null;
        }
        if(top!=null){
            top=top.next;
        }
        Node p=top;
        min=top;
        while(p!=null){
            if(p.val<min.val){
                min=p;
            }
            p=p.next;
        }
    }
    
    public int top() {
        return top.val;
    }
    
    public int getMin() {
        return min.val;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

Runtime: 4 ms, faster than 94.81% of Java online submissions for Min Stack.
Memory Usage: 41.4 MB, less than 16.86% of Java online submissions for Min Stack.

I use Node to represent the stack this time, the time complexity is pretty much the same as the previous solution.
