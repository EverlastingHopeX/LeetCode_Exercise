class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> ans=new ArrayList<>();
        int start=0,end=0;
        while(start<nums.length){
            end=start;
            while(end<nums.length-1 && nums[end+1]==nums[end]+1){
                end++;
            }
            String s=buildStr(nums,start,end);
            // System.out.println(start+" "+end);
            ans.add(s);
            start=end+1;
        }
        return ans;
    }
    
    private String buildStr(int[] nums, int start, int end){
        if(start==end){
            return nums[start]+"";
        }
        return nums[start]+"->"+nums[end];
    }
}

Runtime: 6 ms	76.87%
Memory Usage: 37.6 MB

Easy two pointer. O(N)
But there is a O(NlogN) solution, that can be faster for most cases, which uses binary search.