class Solution {
    int[][] dir=new int[][]{{0,-1},{-1,0},{1,0},{0,1}};
    boolean[][] visited;
    
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        int R=maze.length;
        int C=maze[0].length;
        visited=new boolean[R][C];
        visited[start[0]][start[1]]=true;
        if(destUnreachable(maze,destination)){
            return false;
        }
        for(int i=0;i<4;i++){
            if(DFS(maze,start,destination,i)){
                return true;
            }
        }
        return false;
    }
    
    private boolean destUnreachable(int[][] maze, int[] dest){
        int[] neighbor=new int[2];
        neighbor[0]=dest[0]+dir[0][0];
        neighbor[1]=dest[1]+dir[0][1];
        int left=state(maze, neighbor);
        
        neighbor[0]=dest[0]+dir[1][0];
        neighbor[1]=dest[1]+dir[1][1];
        int up=state(maze, neighbor);
        
        neighbor[0]=dest[0]+dir[2][0];
        neighbor[1]=dest[1]+dir[2][1];
        int down=state(maze, neighbor);
        
        neighbor[0]=dest[0]+dir[3][0];
        neighbor[1]=dest[1]+dir[3][1];
        int right=state(maze, neighbor);
        if(left==right && up == down){
            return true;
        }
        return false;
    }
    
    //0: empty, 1: wall or boundary, 2: visited
    private int state(int[][] maze, int[] pos){
        if(pos[0]<0 || pos[0]>=maze.length || pos[1]<0 || 
           pos[1]>=maze[0].length || maze[pos[0]][pos[1]]==1){
            return 1;
        }
        else if(visited[pos[0]][pos[1]]){
            return 2;
        }
        return 0;
    }
    
    private boolean DFS(int[][] maze, int[] start, int[] dest, int d){
        // System.out.println("DFS: "+start[0]+", "+start[1]+" "+d);
        int[] next=new int[]{(dir[d][0]+start[0]),(dir[d][1]+start[1])};
        // System.out.println("next: "+next[0]+", "+next[1]);
        
        int nState=state(maze, next);
        //reach the wall so test and split
        if(nState==1){
            visited[start[0]][start[1]]=true;
            //reach dest
            if(start[0]==dest[0] && start[1]==dest[1]){
                // System.out.println("found");
                return true;
            }
            for(int i=0;i<4;i++){
                if(i==d || i==3-d){
                    continue;
                }
                int[] temp=new int[2];
                temp[0]=start[0]+dir[i][0];
                temp[1]=start[1]+dir[i][1];
                if(state(maze,temp)==0 && DFS(maze,temp,dest,i)){
                    return true;
                }
            }
            return false;
        }
        // System.out.println(start[0]+", "+start[1]+" -> "+next[0]+", "+next[1]);
        // System.out.println("next: "+next[0]+", "+next[1]);
        //reach old path
        if(visited[next[0]][next[1]]){
            // System.out.println(next[0]+", "+next[1]+" visited");
            return false;
        }
        //keep going if it doesn't reach wall or old path
        return DFS(maze,next,dest,d);
    }
}

Runtime: 2 ms, faster than 97.22% of Java online submissions for The Maze.
Memory Usage: 45.7 MB, less than 91.67% of Java online submissions for The Maze.

This one needs considering a lot of corner cases.

class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        // Set<String> visited=new HashSet<>();
        boolean[][] visited=new boolean[maze.length][maze[0].length];
        visited[start[0]][start[1]]=true;
        int[][] dirs=new int[][]{{1,0},{0,1},{0,-1},{-1,0}};
        
        //DFS
        // Stack<int[]> st=new Stack<>();
        // st.push(start);
        // while(!st.isEmpty()){
        //     int[] cur=st.pop();
        //     // System.out.println(cur[0]+" "+cur[1]);
        //     if(cur[0]==destination[0] && cur[1]==destination[1]){
        //         return true;
        //     }
        //     for(int[] d:dirs){
        //         int[] next=findDest(maze, cur,d);
        //         if(!visited[next[0]][next[1]]){
        //             st.push(next);
        //             visited[next[0]][next[1]]=true;
        //         }
        //     }
        // }
        
        //BFS
        Queue<int[]> que=new LinkedList<>();
        que.offer(new int[]{start[0],start[1],-1});
        while(!que.isEmpty()){
            int size=que.size();
            // System.out.println("---");
            for(int i=0;i<size;i++){
                int[] cur=que.poll();
                // System.out.println(cur[0]+" "+cur[1]);
                if(cur[0]==destination[0] && cur[1]==destination[1]){
                    return true;
                }
                
                // for(int[] d:dirs){
                //     int[] next=findDest(maze, cur,d);
                //     // String s=Arrays.toString(next);
                //     if(!visited[next[0]][next[1]]){
                //         que.offer(next);
                //         visited[next[0]][next[1]]=true;
                //     }
                // }
                
                for(int j=0;j<dirs.length;j++){
                    if(j==cur[2] || j+cur[2]==3){
                        continue;
                    }
                    int[] next=findDest(maze,cur,dirs[j]);
                    if(!visited[next[0]][next[1]]){
                        que.offer(new int[]{next[0],next[1],j});
                        visited[next[0]][next[1]]=true;
                    }
                }
            }
        }
        
        return false;
    }
    
    private int[] findDest(int[][] maze, int[] cur, int[] d){
        // System.out.println("findDest "+cur[0]+","+cur[1]+" dir "+d[0]+","+d[1]);
        int[] p=cur.clone();
        while(true){
            int r=p[0]+d[0], c=p[1]+d[1];
            //meet end
            if(r<0 || r>=maze.length || c<0 || c>=maze[0].length || maze[r][c]==1){
                break;
            }
            p[0]=r;
            p[1]=c;
        }
        return p;
    }
}

Runtime: 7 ms, faster than 37.88% of Java online submissions for The Maze.
Memory Usage: 40.2 MB, less than 80.16% of Java online submissions for The Maze.

I tried both BFS and DFS this time. Their performance is similar, and both of them are worse than the previous solution. I improved my solution by using array instead of set and store the direction to avoid hitting the wall twice or go back, but it is still worse than the first time solution. However, it is more concise and readable compared with the previous one. Apart from that, we can alter maze instead of creating another visited array or set.

The time complexity is O(R*C), since we will at most pass one point twice (vertically or horizontally).
