class Solution {
    int[][] dir=new int[][]{{0,-1},{-1,0},{1,0},{0,1}};
    boolean[][] visited;
    
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        int R=maze.length;
        int C=maze[0].length;
        visited=new boolean[R][C];
        visited[start[0]][start[1]]=true;
        if(destUnreachable(maze,destination)){
            return false;
        }
        for(int i=0;i<4;i++){
            if(DFS(maze,start,destination,i)){
                return true;
            }
        }
        return false;
    }
    
    private boolean destUnreachable(int[][] maze, int[] dest){
        int[] neighbor=new int[2];
        neighbor[0]=dest[0]+dir[0][0];
        neighbor[1]=dest[1]+dir[0][1];
        int left=state(maze, neighbor);
        
        neighbor[0]=dest[0]+dir[1][0];
        neighbor[1]=dest[1]+dir[1][1];
        int up=state(maze, neighbor);
        
        neighbor[0]=dest[0]+dir[2][0];
        neighbor[1]=dest[1]+dir[2][1];
        int down=state(maze, neighbor);
        
        neighbor[0]=dest[0]+dir[3][0];
        neighbor[1]=dest[1]+dir[3][1];
        int right=state(maze, neighbor);
        if(left==right && up == down){
            return true;
        }
        return false;
    }
    
    //0: empty, 1: wall or boundary, 2: visited
    private int state(int[][] maze, int[] pos){
        if(pos[0]<0 || pos[0]>=maze.length || pos[1]<0 || 
           pos[1]>=maze[0].length || maze[pos[0]][pos[1]]==1){
            return 1;
        }
        else if(visited[pos[0]][pos[1]]){
            return 2;
        }
        return 0;
    }
    
    private boolean DFS(int[][] maze, int[] start, int[] dest, int d){
        // System.out.println("DFS: "+start[0]+", "+start[1]+" "+d);
        int[] next=new int[]{(dir[d][0]+start[0]),(dir[d][1]+start[1])};
        // System.out.println("next: "+next[0]+", "+next[1]);
        
        int nState=state(maze, next);
        //reach the wall so test and split
        if(nState==1){
            visited[start[0]][start[1]]=true;
            //reach dest
            if(start[0]==dest[0] && start[1]==dest[1]){
                // System.out.println("found");
                return true;
            }
            for(int i=0;i<4;i++){
                if(i==d || i==3-d){
                    continue;
                }
                int[] temp=new int[2];
                temp[0]=start[0]+dir[i][0];
                temp[1]=start[1]+dir[i][1];
                if(state(maze,temp)==0 && DFS(maze,temp,dest,i)){
                    return true;
                }
            }
            return false;
        }
        // System.out.println(start[0]+", "+start[1]+" -> "+next[0]+", "+next[1]);
        // System.out.println("next: "+next[0]+", "+next[1]);
        //reach old path
        if(visited[next[0]][next[1]]){
            // System.out.println(next[0]+", "+next[1]+" visited");
            return false;
        }
        //keep going if it doesn't reach wall or old path
        return DFS(maze,next,dest,d);
    }
}

Runtime: 2 ms, faster than 97.22% of Java online submissions for The Maze.
Memory Usage: 45.7 MB, less than 91.67% of Java online submissions for The Maze.

This one needs considering a lot of corner cases.