/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max=0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        DFS(root);
        return max;
    }
    
    private int DFS(TreeNode root){
        if(root==null){
            return 0;
        }
        int l=DFS(root.left);
        int r=DFS(root.right);
        // System.out.println(root.val+": "+l+" "+r);
        if(l+r>max){
            max=l+r;
        }
        return Math.max(l+1,r+1);
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Diameter of Binary Tree.
Memory Usage: 39.7 MB, less than 14.53% of Java online submissions for Diameter of Binary Tree.

Easy recursive DFS.