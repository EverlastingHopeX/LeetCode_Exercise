Didn't work it out.
Completed based on other's solution.

class Solution {
    public int minDistance(String word1, String word2) {
        int m=word1.length();
        int n=word2.length();
        int[][] dp=new int [m+1][n+1];
        for(int i=0;i<m+1;i++){
            dp[i][0]=i;
        }
        for(int i=0;i<n+1;i++){
            dp[0][i]=i;
        }
        for(int i=1;i<m+1;i++){
            for(int j=1;j<n+1;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }
                else{
                    dp[i][j]=1+Math.min(Math.min(dp[i][j-1],dp[i-1][j]),dp[i-1][j-1]);
                }
            }
        }
        
        return dp[m][n];
    }
}


Runtime: 7 ms, faster than 37.19% of Java online submissions for Edit Distance.
Memory Usage: 36.6 MB, less than 100.00% of Java online submissions for Edit Distance.

Similar to 1035 Uncrossed Lines.
Other's solution.
https://leetcode.com/problems/edit-distance/discuss/25849/Java-DP-solution-O(nm)