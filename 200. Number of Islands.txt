class Solution {
    
    class UnionFind {
        private int count = 0;
        private int[] parent, rank;
        
        public UnionFind(int n) {
            count = n;
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public int find(int p) {
        	while (p != parent[p]) {
                parent[p] = parent[parent[p]];
                p = parent[p];
            }
            return p;
        }
        
        public void union(int p, int q) {
            // System.out.println("union "+p+" "+q);
            int rootP = find(p);
            int rootQ = find(q);
            if (rootP == rootQ) return;
            if (rank[rootQ] > rank[rootP]) {
                parent[rootP] = rootQ;
            }
            else {
                parent[rootQ] = rootP;
                if (rank[rootP] == rank[rootQ]) {
                    rank[rootP]++;
                }
            }
            count--;
        }
        
        public int count() {
            return count;
        }
    }
    
    public int numIslands(char[][] grid) {
        int r=grid.length;
        if(r==0){
            return 0;
        }
        int c=grid[0].length;
        UnionFind uf=new UnionFind(r*c);
        int water=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                // System.out.println("("+i+","+j+"): "+grid[i][j]);
                if(grid[i][j]=='1'){
                    if(i==0 || j==0){
                        if(i!=0){
                            if(grid[i-1][j]=='1'){
                                uf.union((i-1)*c+j,i*c+j);
                            }
                        }
                        else if(j!=0){
                            if(grid[i][j-1]=='1'){
                                uf.union(i*c+(j-1),i*c+j);
                            }
                        }
                    }
                    else{
                        if(grid[i-1][j]=='1'){
                            uf.union((i-1)*c+j,i*c+j);
                        }
                        if(grid[i][j-1]=='1'){
                            uf.union(i*c+(j-1),i*c+j);
                        }
                    }
                }
                else{
                    water++;
                }
            }
        }
        return uf.count()-water;
    }
}

Runtime: 3 ms, faster than 28.72% of Java online submissions for Number of Islands.
Memory Usage: 41.1 MB, less than 64.07% of Java online submissions for Number of Islands.

This solution is based on union find. Alough union find is a great method in graph problems, 
DFS is a better solution for this problem.
Here is a solution based on DFS.

https://leetcode.com/problems/number-of-islands/discuss/56359/Very-concise-Java-AC-solution

class Solution {
    public int numIslands(char[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    ans++;
                    spread(grid,i,j);
                }
            }
        }
        return ans;
    }
    
    private void spread(char[][] grid,int r, int c){
        if(r<0 || r>=grid.length || c<0 || c>=grid[0].length || grid[r][c]=='0'){
            return;
        }
        // System.out.println("spread "+r+" "+c+": "+grid[r][c]);
        grid[r][c]='0';
        spread(grid, r + 1, c);
        spread(grid, r - 1, c);
        spread(grid, r, c + 1);
        spread(grid, r, c - 1);
    }
}

Runtime: 1 ms, faster than 100.00% of Java online submissions for Number of Islands.
Memory Usage: 41.9 MB, less than 49.30% of Java online submissions for Number of Islands.

Using loop instead of call spread() 4 times will cost much more.