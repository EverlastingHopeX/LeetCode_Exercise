/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if(root==null){
            return new ArrayList<Integer>();
        }
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        List<Integer> ans=new ArrayList<>();
        while(!queue.isEmpty()){
            int n=queue.size();
            TreeNode cur=null;
            for(int i=0;i<n;i++){
                cur=queue.poll();
                if(cur.left!=null){
                    queue.offer(cur.left);
                }
                if(cur.right!=null){
                    queue.offer(cur.right);
                }
            }
            ans.add(cur.val);
        }
        return ans;
    }
}

Runtime: 1 ms, faster than 78.71% of Java online submissions for Binary Tree Right Side View.
Memory Usage: 37.9 MB, less than 83.75% of Java online submissions for Binary Tree Right Side View.