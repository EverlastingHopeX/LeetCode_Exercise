class Solution {
    public int[] findPermutation(String s) {
        int[] ans=new int[s.length()+1];
        
        int max=1;
        int i=0;
        while(i<s.length()){
            if(s.charAt(i)=='I'){
                int[] t=increase(ans,s,i,max);
                i=t[0];
                max=t[1];
            }
            if(i==s.length()){
                break;
            }
            if(s.charAt(i)=='D'){
                int[] t=decrease(ans,s,i,max);
                i=t[0];
                max=t[1];
            }
        }
        
        return ans;
    }
    
    private int[] increase(int[] ans, String s, int i, int max){
        // System.out.println("increase");
        if(i==0){
            ans[0]=1;
        }
        while(i<s.length() && s.charAt(i)=='I'){
            max++;
            ans[i+1]=max;
            // System.out.println((i+1)+" "+max);
            i++;
        }
        // System.out.println("max "+max);
        return new int[]{i,max};
    }
    
    private int[] decrease(int[] ans, String s, int i, int max){
        // System.out.println("decrease");
        int t=i;
        while(i<s.length() && s.charAt(i)=='D'){
            i++;
        }
        max+=i-t;
        int k=0;
        while(t<=i){
            ans[t]=max-k;
            // System.out.println(t+" "+ans[t]);
            k++;
            t++;
        }
        // System.out.println("max "+max);
        return new int[]{i,max};
        
    }
}

Runtime: 2 ms, faster than 89.22% of Java online submissions for Find Permutation.
Memory Usage: 41.2 MB, less than 74.85% of Java online submissions for Find Permutation.

The string s will give us the basic variation curve of the permutation.
After we become aware of the curve, we need to modify it to make each element unique and the permutation be the smallest one.
We need to maintain variable "max", so that we will put the larger element in the latter part to construct the smallest permutation.