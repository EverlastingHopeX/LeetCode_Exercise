Didn't work it out.

class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        boolean[] travel=new boolean[367];
        for(int day:days){
            travel[day]=true;
        }
        int[] minCost=new int[367];
        int i=1;
        for(;i<367 && i<=days[days.length-1];i++){
            if(!travel[i]){
                minCost[i]=minCost[i-1];
            }
            else{
                int min=costs[0]+minCost[i-1];
                int t=costs[1]+minCost[Math.max(0,i-7)];
                min=t<min?t:min;
                t=costs[2]+minCost[Math.max(0,i-30)];
                min=t<min?t:min;
                minCost[i]=min;
                // System.out.println(i+": "+minCost[i]);
            }
        }
        return minCost[i-1];
    }
}

Runtime: 1 ms, faster than 93.84% of Java online submissions for Minimum Cost For Tickets.
Memory Usage: 34.4 MB, less than 100.00% of Java online submissions for Minimum Cost For Tickets.

Other's solution.
While iterating everyday, the algorithm finds the minimum cost among buy 1 day pass + min cost 
yesterday, buy 7-day pass + min cost 7 days ago and buy 30-day pass + min cost 30 days ago.
https://leetcode.com/problems/minimum-cost-for-tickets/discuss/226670/Java-DP-Solution-with-explanation-O(n)

class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int N=days.length;
        int[] min=new int[N];
        min[0]=Math.min(costs[0],Math.min(costs[1],costs[2]));
        for(int i=1;i<min.length;i++){
            min[i]=min[i-1]+costs[0];
            
            int p=findPrev(days, i,7);
            int t=costs[1];
            if(p!=-1){
                // System.out.println("min[p] "+min[p]);
                t+=min[p];
            }
            // System.out.println("t "+t);
            min[i]=Math.min(min[i],t);
            // System.out.println("min "+days[i]+" "+min[i]);
            p=findPrev(days,i,30);
            t=p==-1?costs[2]:min[p]+costs[2];
            min[i]=Math.min(min[i],t);
            
            // System.out.println("min "+days[i]+" "+min[i]);
        }
        return min[N-1];
    }
    
    private int findPrev(int[] days, int i, int time){
        int target=days[i]-time;
        int p=i;
        while(p>=0){
            if(days[p]<=target){
                break;
            }
            p--;
        }
        // System.out.println("prev "+p);
        return p;
    }
}

Runtime: 1 ms, faster than 89.18% of Java online submissions for Minimum Cost For Tickets.
Memory Usage: 39.3 MB, less than 30.12% of Java online submissions for Minimum Cost For Tickets.

typical dp, this is much easier for me than one year ago.