class Solution {
    Set<Integer> cols=new HashSet<>();
    Set<Integer> rows=new HashSet<>();
    Set<Integer> sqrs=new HashSet<>();
    
    public void solveSudoku(char[][] board) {
        if(!traverse(board)){
            System.out.println("wrong sudoku");
            return;
        }
        fill(board, 0, 0);
    }
    
    private boolean traverse(char[][] board){
        int r=-1,c=-1,s=-1;
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]!='.'){
                    int k=board[i][j]-'0';
                    r=j*10+k;
                    c=i*10+k;
                    s=((i/3)*3+j/3)*10+k;
                    if(!cols.add(c) || !rows.add(r) || !sqrs.add(s)){
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
    private boolean fill(char[][] board, int i, int j){
        // System.out.println(i+", "+j);
        if(i>=board.length){
            return true;
        }
        int r=-1;
        int c=-1;
        int s=-1;
        int nj=j+1;
        int ni=i;
        if(nj>=board[0].length){
            nj=0;
            ni++;
        }
        if(board[i][j]=='.'){
            for(int k=1;k<10;k++){
                r=j*10+k;
                if(rows.contains(r)){
                    // System.out.println("r jump");
                    continue;
                }
                c=i*10+k;
                if(cols.contains(c)){
                    // System.out.println("c jump");
                    continue;
                }
                s=((i/3)*3+j/3)*10+k;
                if(sqrs.contains(s)){
                    // System.out.println("s jump");
                    continue;
                }
                cols.add(c);
                rows.add(r);
                sqrs.add(s);
                board[i][j]=(char)(k+'0');
                // System.out.println("try "+board[i][j]);
                if(fill(board,ni,nj)){
                    return true;
                }
                cols.remove(c);
                rows.remove(r);
                sqrs.remove(s);
                // System.out.println(i+", "+j+" try "+board[i][j]+ " fail");
            }
            board[i][j]='.';
        }
        else{
            return fill(board,ni,nj);
        }
        return false;
    }
}

Runtime: 13 ms, faster than 47.55% of Java online submissions for Sudoku Solver.
Memory Usage: 39.4 MB, less than 10.53% of Java online submissions for Sudoku Solver.

Relatively easy based on 36.