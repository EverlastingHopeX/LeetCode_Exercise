class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        List<int[]> list=new LinkedList<int[]>();
        for(int i=0,j=0;i<A.length && j<B.length;){
            if(A[i][0]<=B[j][0]){
                if(A[i][1]<B[j][0]){
                    i++;
                }
                else{
                    if(A[i][1]<=B[j][1]){
                        list.add(new int[]{B[j][0],A[i][1]});
                        i++;
                    }
                    else{
                        list.add(new int[]{B[j][0],B[j][1]});
                        j++;
                    }
                }
            }
            else{
                if(B[j][1]<A[i][0]){
                    j++;
                }
                else{
                    if(B[j][1]<=A[i][1]){
                        list.add(new int[]{A[i][0],B[j][1]});
                        j++;
                    }
                    else{
                        list.add(new int[]{A[i][0],A[i][1]});
                        i++;
                    }
                }
            }
        }
        return list.toArray(new int[list.size()][]);
    }
}

Runtime: 2 ms, faster than 99.77% of Java online submissions for Interval List Intersections.
Memory Usage: 44.1 MB, less than 81.08% of Java online submissions for Interval List Intersections.