/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> l1=leaf(root1);
        List<Integer> l2=leaf(root2);
        if(l1.size()!=l2.size()){
            return false;
        }
        for(int i=0;i<l1.size();i++){
            if(l1.get(i)!=l2.get(i)){
                return false;
            }
        }
        return true;
    }
    
    private List<Integer> leaf(TreeNode root){
        Stack<TreeNode> stack=new Stack<TreeNode>();
        stack.push(root);
        List<Integer> ans=new ArrayList<Integer>();
        while(!stack.empty()){
            TreeNode cur=stack.pop();
            if(cur.right!=null){
                stack.push(cur.right);
            }
            if(cur.left!=null){
                stack.push(cur.left);
            }
            if(cur.left==null && cur.right==null){
                ans.add(cur.val);
            }
        }
        return ans;
    }
}

Runtime: 1 ms, faster than 65.24% of Java online submissions for Leaf-Similar Trees.
Memory Usage: 34.7 MB, less than 100.00% of Java online submissions for Leaf-Similar Trees.
