class Solution {
    public String minRemoveToMakeValid(String s) {
        Set<Integer> remove=new HashSet<>();
        Stack<int[]> st=new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            if(Character.isLetter(ch)){
                continue;
            }
            if(ch=='('){
                st.push(new int[]{-1,i});
            }
            else{
                if(st.isEmpty()){
                    remove.add(i);
                }
                else{
                    st.pop();
                }
            }
        }
        while(!st.isEmpty()){
            int[] leftP=st.pop();
            remove.add(leftP[1]);
        }
        StringBuilder sb=new StringBuilder("");
        for(int i=0;i<s.length();i++){
            if(remove.contains(i)){
                continue;
            }
            else{
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
}

Runtime: 32 ms, faster than 26.63% of Java online submissions for Minimum Remove to Make Valid Parentheses.
Memory Usage: 40.1 MB, less than 79.61% of Java online submissions for Minimum Remove to Make Valid Parentheses.

Pretty easy with the stack.