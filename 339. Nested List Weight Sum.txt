/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    Map<Integer,Integer> sumMap;
    
    public int depthSum(List<NestedInteger> nestedList) {
        sumMap=new HashMap<>();
        depthSum(nestedList,1);
        
        int sum=0;
        for(int k:sumMap.keySet()){
            sum+=sumMap.get(k)*k;
        }
        return sum;
    }
    
    private void depthSum(List<NestedInteger> nestedList, int depth){
        for(NestedInteger ni:nestedList){
            if(ni.isInteger()){
                int sum=sumMap.getOrDefault(depth,0);
                sum+=ni.getInteger();
                sumMap.put(depth,sum);
            }
            else{
                depthSum(ni.getList(),depth+1);
            }
        }
    }
}

Runtime: 1 ms, faster than 39.35% of Java online submissions for Nested List Weight Sum.
Memory Usage: 36.6 MB, less than 96.15% of Java online submissions for Nested List Weight Sum.