class Solution {
    class Trie{        
        Node root;
        
        Trie(){
            root=new Node();
        }
        
        public boolean insert(String word){
            // System.out.println("insert "+word);
            Node cur=root;
            for(char ch:word.toCharArray()){
                // System.out.println(ch);
                int idx=ch-'a';
                // System.out.println(idx);
                if(cur.children[idx]==null){
                    cur.children[idx]=new Node();
                    cur.children[idx].val=ch;
                }
                cur=cur.children[idx];
            }
            cur.isEnd=true;
            return true;
        }
    }
    
    class Node{
        char val;
        boolean isEnd;
        Node[] children;

        Node(){
            isEnd=false;
            children=new Node[26];
            val='!';
        }
    }
    
    public boolean wordBreak(String s, List<String> wordDict) {
        Trie trie=new Trie();
        for(String str:wordDict){
            trie.insert(str);
        }
        boolean[] dp=new boolean[s.length()+1];
        dp[s.length()]=true;
        for(int i=s.length()-1;i>=0;i--){
            // System.out.println("i: "+i);
            Node cur=trie.root;
            for(int j=i;j<s.length();j++){
                int idx=s.charAt(j)-'a';
                cur=cur.children[idx];
                if(cur==null){
                    break;
                }
                // System.out.println("j: "+j);
                // System.out.println(cur.val+":"+s.charAt(j));
                if(cur.isEnd && dp[j+1]){
                    // System.out.println("dp["+i+"]: true");
                    dp[i]=true;
                }
            }
        }
        return dp[0];
    }
}

Runtime: 1 ms, faster than 99.52% of Java online submissions for Word Break.
Memory Usage: 36 MB, less than 93.48% of Java online submissions for Word Break.

I tried to solve this with Trie alone at first, but I got TLE. Then I tried
to optimized it using greedy (use stack to match the longest string first), 
and it still failed. However, I checked other's solution and found out this
question should be solved using dp and traverse string from end to start.

class Solution {
    class TrieNode{
        TrieNode[] children;
        boolean isEnd;
        
        TrieNode(){
            children=new TrieNode[26];
            isEnd=false;
        }
    }
    
    public boolean wordBreak(String s, List<String> wordDict) {
        TrieNode root=new TrieNode();
        for(String word:wordDict){
            TrieNode cur=root;
            for(char ch:word.toCharArray()){
                int idx=ch-'a';
                if(cur.children[idx]==null){
                    cur.children[idx]=new TrieNode();
                }
                cur=cur.children[idx];
            }
            cur.isEnd=true;
        }
        boolean[] notPossible=new boolean[s.length()];
        return check(notPossible,root,s,0);
    }
    
    private boolean check(boolean[] notPossible, TrieNode root,String s, int start){
        // System.out.println("check "+start);
        if(start>=s.length()){
            return true;
        }
        if(notPossible[start]){
            return false;
        }
        TrieNode cur=root;
        Stack<Integer> st=new Stack<>();
        for(int i=start;i<s.length();i++){
            int idx=s.charAt(i)-'a';
            if(cur.children[idx]==null){
                break;
            }
            cur=cur.children[idx];
            if(cur.isEnd){
                st.push(i+1);
            }
        }
        while(!st.isEmpty()){
            int i=st.pop();
            if(check(notPossible,root,s,i)){
                return true;
            }
        }
        notPossible[start]=true;
        return false;
    }
}

Runtime: 4 ms, faster than 86.75% of Java online submissions for Word Break.
Memory Usage: 40.3 MB, less than 5.21% of Java online submissions for Word Break.

Also got a TLE at first, even after adding an optimization with stack. Then I realize that the reason why I got TLE is that it will keep tring to start check from one index even if it has already been checked to be impossible to match, so I add a boolean array to memorize this.
The perfromance difference between this solution and the previous dp solution is tiny, however, the previous one is more concise.

class Solution {
    class trieNode {
        trieNode[] children;
        boolean isEnd;
        
        trieNode(){
            children=new trieNode[26];
            isEnd=false;
        }
    }
    
    public boolean wordBreak(String s, List<String> wordDict) {
        trieNode root=new trieNode();
        boolean[] notPossible=new boolean[s.length()];
        for(String str:wordDict){
            addTrie(root,str);
        }
        
        return DFS(s,0,root,root,notPossible);
    }
    
    private void addTrie(trieNode root, String str){
        for(char ch:str.toCharArray()){
            int idx=ch-'a';
            if(root.children[idx]==null){
                root.children[idx]=new trieNode();
            }
            root=root.children[idx];
        }
        root.isEnd=true;
    }
    
    private boolean DFS(String s, int k,trieNode root, trieNode cur, boolean[] notPossible){
        // System.out.println("DFS "+k);
        if(k>=s.length()){
            if(cur.isEnd){
                return true;
            }
            return false;
        }
        int idx=s.charAt(k)-'a';
        if(cur.children[idx]==null){
            return false;
        }
        cur=cur.children[idx];
        boolean flag=false;
        if(cur.isEnd && !notPossible[k]){
            // System.out.println("break");
            flag=flag || DFS(s,k+1,root,root,notPossible);
            if(!flag){
                // System.out.println("can't break at "+k);
                notPossible[k]=true;
            }
        }
        flag= flag || DFS(s,k+1,root,cur,notPossible);
        return flag;
    }
}

Runtime: 1 ms	99.29%
Memory Usage: 38.7 MB	92.33%

A better verison of my second solution. The performance is pretty much the same as DP. The idea is DFS with trie, don't need to traverse from the end to the start.