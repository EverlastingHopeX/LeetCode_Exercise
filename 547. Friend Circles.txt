class Solution {
    private int[] id;
    private int count;
    //initialize
    private void UF(int N){
        id=new int[N];
        count=N;
        for(int i=0;i<N;i++){
            id[i]=i;
        }
    }
    
    private boolean connected(int p, int q){
        return find(p) == find(q); 
    }
    
	private int find(int p){
        while(p != id[p]) 
            p = id[p];
        return p; 
    }
    
	private void union(int p, int q){ 
		int pID = find(p);
		int qID = find(q);
		if (pID == qID) 
            return;
		id[pID]=qID;
        count--;
	}
    
    public int findCircleNum(int[][] M) {
        int r=M.length;
        int c=M[0].length;
        UF(r);
        for(int i=0;i<r;i++){
            for(int j=i+1;j<c;j++){
                if(M[i][j]==1){
                    union(i,j);
                }
            }
        }
        return count;
    }
}

Runtime: 3 ms, faster than 36.70% of Java online submissions for Friend Circles.
Memory Usage: 44.6 MB, less than 46.08% of Java online submissions for Friend Circles.

Typical question for union find. Can be solved only using find.
Here is a link of template of union find.
https://leetcode.com/problems/friend-circles/discuss/101336/Java-solution-Union-Find