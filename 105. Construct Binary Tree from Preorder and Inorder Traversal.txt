/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length==0){
            return null;
        }
        TreeNode root=new TreeNode(preorder[0]);
        int v=root.val;
        // System.out.println("cur:"+v);
        // for(int i=0;i<preorder.length;i++){
        //     System.out.println(i+":"+preorder[i]);
        // }
        int cnt=0;
        for(;cnt<inorder.length && inorder[cnt]!=v;cnt++){
        }
        // System.out.println(cnt);
        // System.out.println(preorder.length-1);
        TreeNode l=buildTree(Arrays.copyOfRange(preorder,1,cnt+1),Arrays.copyOfRange(inorder,0,cnt));
        TreeNode r=buildTree(Arrays.copyOfRange(preorder,cnt+1,preorder.length),Arrays.copyOfRange(inorder,cnt+1,inorder.length));
        root.left=l;
        root.right=r;
        return root;
    }
}

Runtime: 16 ms, faster than 9.08% of Java online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
Memory Usage: 76.9 MB, less than 5.61% of Java online submissions for Construct Binary Tree from Preorder and Inorder Traversal.

Other's fast solution.
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34541/5ms-Java-Clean-Solution-with-Caching