class Solution {
    public void wiggleSort(int[] nums) {
        if(nums.length<=1){
            return;
        }
        int min=nums[0],max=nums[0];
        for(int n:nums){
            min=Math.min(min,n);
            max=Math.max(max,n);
        }
        int left=min,right=max;
        int half=(nums.length+1)/2;
        // System.out.println("half "+half);
        int target=0;
        while(left<right){
            int mid=left+(right-left)/2;
            int t=cntSm(nums,mid);
            // System.out.println("t "+t);
            if(t<half){
                left=mid+1;
            }
            else if(t>half){
                right=mid;
            }
            else{
                right=mid;
                break;
            }
        }
        // System.out.println("mid "+right);
        
        int p1=0,p2=1;
        Queue<Integer> cands1=new LinkedList<>();
        Queue<Integer> cands2=new LinkedList<>();
        while(p1<nums.length && p2<nums.length){
            while(p1<nums.length && nums[p1]<=right){
                if(nums[p1]==right){
                    cands1.offer(p1);
                }
                p1+=2;
            }
            while(p2<nums.length && nums[p2]>=right){
                if(nums[p2]==right){
                    cands2.offer(p2);
                }
                p2+=2;
            }
            // System.out.println(p1+" "+p2);
            if(p1>=nums.length || p2>=nums.length){
                break;
            }
            swap(nums,p1,p2);
        }
        while(p1<nums.length){
            if(nums[p1]>right){
                swap(nums,p1,cands2.poll());
            }
            p1+=2;
        }
        while(p2<nums.length){
            if(nums[p2]<right){
                swap(nums,p2,cands1.poll());
            }
            p2+=2;
        }
    }
    
    private int cntSm(int[] nums, int k){
        // System.out.println("cntSm "+k);
        int t=0;
        int half=(nums.length+1)/2;
        for(int i=0;i<nums.length;i++){
            // System.out.println(nums[i]);
            if(nums[i]<=k){
                t++;
            }
            if(t>half){
                break;
            }
        }
        return t;
    }
    
    private void swap(int[] nums, int p1, int p2){
        // System.out.println("swap "+p1+" "+p2);
        int t=nums[p1];
        nums[p1]=nums[p2];
        nums[p2]=t;
    }
}

Runtime: 3 ms, faster than 16.15% of Java online submissions for Wiggle Sort.
Memory Usage: 40.8 MB, less than 46.08% of Java online submissions for Wiggle Sort.

The idea is to find the median and then place the elements in odd or even indexes accordingly. The idea is simple but takes some time to implement it correctly.
I used binary search to find the median, so I don't have to sort the array. The search space can be smaller if I sort the array, but sorting array will cost more time.
Time complexity O(DlogD+N). D is the difference between largest element and smallest element.

However, we can just swap the index i with i-1 if the relationship between i and i-1 does not satisfy the restriction. It is O(N).
Other's explanation of how this works.
https://leetcode.com/problems/wiggle-sort/discuss/71693/My-explanations-of-the-best-voted-Algo