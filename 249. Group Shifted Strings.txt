class Solution {
    public List<List<String>> groupStrings(String[] strings) {
        Map<String,List<String>> groups=new HashMap<>();
        for(String str:strings){
            String key=getKey(str);
            List<String> li=groups.getOrDefault(key,new ArrayList<>());
            li.add(str);
            groups.put(key,li);
        }
        
        List<List<String>> ans=new ArrayList<>();
        for(List<String> li:groups.values()){
            ans.add(li);
        }
        return ans;
    }
    
    private String getKey(String str){
        StringBuilder sb=new StringBuilder("");
        for(int i=1;i<str.length();i++){
            int offset=str.charAt(i)-str.charAt(i-1);
            if(offset<0){
                offset+=26;
            }
            sb.append(offset+" ");
        }
        return sb.toString();
    }
}

Runtime: 14 ms, faster than 11.95% of Java online submissions for Group Shifted Strings.
Memory Usage: 42.1 MB, less than 5.07% of Java online submissions for Group Shifted Strings.

Use string key to memorize the offset of chars in a string.