class Solution {
    public List<List<Integer>> removeInterval(int[][] intervals, int[] toBeRemoved) {
        Arrays.sort(intervals,(o1,o2)->(o1[0]-o2[0]));
        boolean[] removed=new boolean[intervals.length];
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<intervals.length;i++){
            // System.out.println(intervals[i][0]+", "+intervals[i][1]);
            if(toBeRemoved[1]<=intervals[i][0] || toBeRemoved[0]>=intervals[i][1]){
                ans.add(getList(intervals[i][0],intervals[i][1]));
                continue;
            }
            
            if(toBeRemoved[0]<=intervals[i][0]){
                if(toBeRemoved[1]<intervals[i][1]){
                    ans.add(getList(toBeRemoved[1],intervals[i][1]));
                }
            }
            else{
                ans.add(getList(intervals[i][0],toBeRemoved[0]));
                if(toBeRemoved[1]<intervals[i][1]){
                    ans.add(getList(toBeRemoved[1],intervals[i][1]));
                }
            }
        }
        return ans;
    }
    
    private List<Integer> getList(int start, int end){
        List<Integer> li=new ArrayList<>();
        li.add(start);
        li.add(end);
        return li;
    }
}

Runtime: 7 ms	72.33%
Memory Usage: 48.7 MB

The if part can be improved to be more concise and clear.