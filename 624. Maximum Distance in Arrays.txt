class Solution {
    public int maxDistance(List<List<Integer>> arrays) {
        int[][] min=new int[2][2];
        min[0][1]=-1;
        min[1][1]=-1;
        int[][] max=new int[2][2];
        max[0][1]=-1;
        max[1][1]=-1;
        int p=0;
        for(List<Integer> li:arrays){
            // System.out.println("li "+p);
            int tmin=li.get(0);
            int tmax=li.get(li.size()-1);
            if(tmin<min[0][0] || min[0][1]==-1){
                min[1][0]=min[0][0];
                min[1][1]=min[0][1];
                min[0][0]=tmin;
                min[0][1]=p;
            }
            else if(tmin<min[1][0] || min[1][1]==-1){
                min[1][0]=tmin;
                min[1][1]=p;
            }
            
            if(tmax>max[0][0] || max[0][1]==-1){
                max[1][0]=max[0][0];
                max[1][1]=max[0][1];
                max[0][0]=tmax;
                max[0][1]=p;
            }
            else if(tmax>max[1][0] || max[1][1]==-1){
                max[1][0]=tmax;
                max[1][1]=p;
            }
            p++;
        }
        // System.out.println("max "+max[0][0]+", "+ max[0][1]+"|"+max[1][0]+", "+ max[1][1]);
        // System.out.println("min "+min[0][0]+", "+ min[0][1]+"|"+min[1][0]+", "+ min[1][1]);
        if(min[0][1]==max[0][1]){
            return Math.max(max[1][0]-min[0][0],max[0][0]-min[1][0]);
        }
        return max[0][0]-min[0][0];
    }
}

Runtime: 3 ms	92.17%
Memory Usage: 43 MB	