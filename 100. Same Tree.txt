/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Stack<TreeNode> st1=new Stack<>(), st2=new Stack<>();
        st1.push(p);
        st2.push(q);
        while(!st1.isEmpty() && !st2.isEmpty()){
            TreeNode t1=st1.pop();
            TreeNode t2=st2.pop();
            // System.out.println(t1.val+" "+t2.val);
            if(t1==null || t2==null){
                // System.out.println("find null");
                if(t1!=t2){
                    return false;
                }
                continue;
            }
            else{
                if(t1.val!=t2.val){
                    return false;
                }
            }
            st1.push(t1.right);
            st1.push(t1.left);
            st2.push(t2.right);
            st2.push(t2.left);
        }
        return true;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Same Tree.
Memory Usage: 37.3 MB, less than 5.75% of Java online submissions for Same Tree.