class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        Map<Integer, Map<Integer,Integer>> map=new HashMap<Integer, Map<Integer,Integer>>();
        for(int[] time:times){
            if(map.containsKey(time[0])){
                Map<Integer,Integer> dstMap=map.get(time[0]);
                dstMap.put(time[1],time[2]);
            }
            else{
                Map<Integer, Integer> dstMap=new HashMap<Integer, Integer>();
                dstMap.put(time[1],time[2]);
                map.put(time[0],dstMap);
            }
        }
        
        int[] min=new int[N+1];
        for(int i=1;i<=N;i++){
            if(i!=K){
                min[i]=-1;
            }
        }
        Stack<Integer> stack=new Stack<Integer>();
        stack.push(K);
        boolean[] visited=new boolean[N+1];
        while(!stack.empty()){
            int cur=stack.pop();
            if(!map.containsKey(cur)){
                continue;
            }
            Map<Integer,Integer> dstMap=map.get(cur);
            for(Map.Entry<Integer,Integer> entry:dstMap.entrySet()){
                int dst=entry.getKey();
                int cst=entry.getValue();
                if(min[cur]+cst<min[dst] || min[dst]==-1){
                    min[dst]=min[cur]+cst;
                }
                if(!visited[cur]){
                    stack.push(dst);
                }
            }
            visited[cur]=true;
        }
        int max=-1;
        for(int m:min){
            if(m<0){
                return -1;
            }
            max=Math.max(max,m);
        }
        return max;
    }
}

Runtime: 134 ms, faster than 6.14% of Java online submissions for Network Delay Time.
Memory Usage: 49.2 MB, less than 69.05% of Java online submissions for Network Delay Time.

