class Solution {
    
    Map<Integer,List<Integer>> adjMap;
    Set<String> notCrit;
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        //init
        adjMap=new HashMap<>();
        for(List<Integer> pair:connections){
            List<Integer> li=adjMap.getOrDefault(pair.get(0),new ArrayList<>());
            li.add(pair.get(1));
            adjMap.put(pair.get(0),li);
            li=adjMap.getOrDefault(pair.get(1),new ArrayList<>());
            li.add(pair.get(0));
            adjMap.put(pair.get(1),li);
        }
        LinkedList<Integer> path=new LinkedList<>();
        boolean[] visited=new boolean[n];
        notCrit=new HashSet<>();
        visited[0]=true;
        path.add(0);
        DFS(0,path,visited);
        List<List<Integer>> ans=new ArrayList<>();
        for(List<Integer> pair:connections){
            int src=pair.get(0);
            int dst=pair.get(1);
            if(src>dst){
                int t=src;
                src=dst;
                dst=t;
            }
            String str=src+","+dst;
            if(!notCrit.contains(str)){
                ans.add(pair);
            }
        }
        return ans;
    }
    
    private void DFS(int node, LinkedList<Integer> path, boolean[] visited){
        // System.out.println("DFS "+node);
        for(int next:adjMap.get(node)){
            if(path.size()>1 && next==path.get(path.size()-2)){
                continue;
            }
            path.add(next);
            // System.out.println("add "+next);
            if(visited[next]){
                addNotCrit(path,next);
            }
            else{
                // System.out.println(node+" to "+next);
                visited[next]=true;
                DFS(next,path,visited);
            }
            path.removeLast();
        }
    }
    
    private void addNotCrit(LinkedList<Integer> path, int node){
        // System.out.println("addNotCrit "+node+" "+path.size());
        int cur=0;
        while(cur<path.size() && path.get(cur)!=node){
            cur++;
        }
        int prev=cur;
        cur++;
        while(cur<path.size()){
            int src=path.get(prev);
            int dst=path.get(cur);
            if(src>dst){
                int t=src;
                src=dst;
                dst=t;
            }
            String str=src+","+dst;
            // System.out.println(str+" not critical");
            notCrit.add(str);
            prev=cur;
            cur++;
        }
    }
}

Got TLE. The idea is to find every circle by DFS, and all edges of circles are not critical, so the edges left are critical.

Other's solution.
https://leetcode.com/problems/critical-connections-in-a-network/discuss/401340/Clean-Java-Solution-With-Explanation!!!-Great-Question!