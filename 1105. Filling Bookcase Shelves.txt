Didn't work it out.

My solution based on other's.
class Solution {
    public int minHeightShelves(int[][] books, int shelf_width) {
        int n=books.length;
        int[] dp=new int[n+1];
        dp[0]=0;
        for(int i=1;i<=n;i++){
            int height=books[i-1][1];
            int width=books[i-1][0];
            dp[i]=dp[i-1]+height;
            // System.out.println("dp[i-1]:"+dp[i-1]);
            // System.out.println("i:"+i+" height:"+height+" width:"+width+" dp:"+dp[i]);
            for(int j=i-2;j>=0 && width+books[j][0]<=shelf_width;j--){
                width+=books[j][0];
                height=Math.max(height,books[j][1]);
                dp[i]=Math.min(dp[i],dp[j]+height);
                // System.out.println("j:"+j+" height:"+height+" width:"+width+" dp:"+dp[j]);
            }
        }
        
        return dp[n];
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Filling Bookcase Shelves.
Memory Usage: 38.7 MB, less than 100.00% of Java online submissions for Filling Bookcase Shelves.

Other's solution.
https://leetcode.com/problems/filling-bookcase-shelves/discuss/323315/Java-DP-solution