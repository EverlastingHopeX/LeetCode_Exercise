Didn't work it out.
The key is that the possible nubmer can only be A[0] and B[0], and there is no minimum number of rotations as if A[0]
and B[0] are both possible, then either A[0] = B[0] or the numbers of rotations are the same. So we only need to test 
the numbers of rotations based on A[0] and B[0], when there is a solution.

Other's solution.
https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/discuss/252242/JavaC%2B%2BPython-Different-Ideas

class Solution {
    public int minDominoRotations(int[] A, int[] B) {
        int a1=0,a2=0;
        int b1=0,b2=0;
        for(int i=0;i<A.length;i++){
            if(A[i]==A[0] || B[i]==A[0]){
                if(A[i]==A[0]){
                    a1++;
                }
                if(B[i]==A[0]){
                    a2++;
                }
            }
            else{
                A[0]=-1;
            }
            if(A[i]==B[0] || B[i]==B[0]){
                if(A[i]==B[0]){
                    b1++;
                }
                if(B[i]==B[0]){
                    b2++;
                }
            }
            else{
                B[0]=-1;
            }
            if(A[0]<0 && B[0]<0){
                return -1;
            }
        }
        if(A[0]>0){
            return A.length-Math.max(a1,a2);
        }
        return B.length-Math.max(b1,b2);
    }
}

Runtime: 6 ms	45.51%
Memory Usage: 46.5 MB

Pretty easy.