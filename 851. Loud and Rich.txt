Didn't work it out.
My solution is not accepted as memory limit exceeded.

class Solution {
    public int[] loudAndRich(int[][] richer, int[] quiet) {
        int num=quiet.length;
        List[] richerList=new ArrayList[num];
        //initialize
        for(int i=0;i<num;i++){
            richerList[i]=new ArrayList<Integer>();
        }
        for(int i=0;i<richer.length;i++){
            int rich=richer[i][0];
            int poor=richer[i][1];
            richerList[poor].add(rich);
            // System.out.println(rich+" is richer than "+poor);
        }
        boolean[] visited=new boolean[num];
        for(int i=0;i<num;i++){
            DFS(richerList, i, visited);
        }
        int[] ans=new int[num];
        for(int i=0;i<num;i++){
            // System.out.println("i: "+i);
            ans[i]=i;
            int min=quiet[i];
            ListIterator<Integer> it=richerList[i].listIterator();
            while(it.hasNext()){
                int p=it.next();
                // System.out.println("richer "+p+" quiet: "+quiet[p]);
                if(quiet[p]<min){
                    min=quiet[p];
                    ans[i]=p;
                }
            }
        }
        return ans;
    }
    
    private void DFS(List[] richerList, int idx, boolean[] visited){
        // System.out.println("update list for "+idx);
        if(visited[idx]){
            // System.out.println("visited");
            return;
        }
        ListIterator<Integer> idxIt=richerList[idx].listIterator();
        while(idxIt.hasNext()){
            int r=idxIt.next();
            // System.out.println("r:"+r+" of "+idx);
            //go deeper and update if not visited
            if(!visited[r]){
                DFS(richerList, r, visited);
            }
            ListIterator<Integer> it=richerList[r].listIterator();
            while(it.hasNext()){
                int t=it.next();
                idxIt.add(t);
            }
        }
        visited[idx]=true;
    }
}

The solution below is other's accepted solution based on DFS.
https://leetcode.com/problems/loud-and-rich/discuss/137918/C%2B%2BJavaPython-Concise-DFS

class Solution {
    public int[] loudAndRich(int[][] richer, int[] quiet) {
        int N=quiet.length;
        List<Integer>[] richerList=new ArrayList[N];
        for(int i=0;i<richerList.length;i++){
            richerList[i]=new ArrayList<Integer>();
        }
        for(int[] r:richer){
            richerList[r[1]].add(r[0]);
        }
        int[] ans=new int[N];
        Arrays.fill(ans,-1);
        for(int i=0;i<ans.length;i++){
            findQuiet(richerList,quiet,i,ans);
        }
        return ans;
    }
    
    //find the least quiet person which is not poorer than i
    private void findQuiet(List<Integer>[] richerList, int[] quiet, int i, int[] ans){
        // System.out.println("find Quiet "+i);
        if(ans[i]!=-1){
            return;
        }
        int min=i;
        for(int k:richerList[i]){
            findQuiet(richerList,quiet,k,ans);
            if(quiet[ans[k]]<quiet[min]){
                min=ans[k];
            }
        }
        ans[i]=min;
        // System.out.println("ans "+i+" "+ans[i]);
    }
}

Runtime: 5 ms, faster than 98.62% of Java online submissions for Loud and Rich.
Memory Usage: 47.5 MB, less than 90.32% of Java online submissions for Loud and Rich.

Solved this at the second time. It is basically the same solution in the link above.
The idea is to use richerList to memorize the network, and use DFS to find the least quiet person. Also, to avoid visiting nodes multiple times, we can utilize ans to memorize the least quiet person for each person.