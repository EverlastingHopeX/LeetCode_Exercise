/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int move=0;
    
    public int distributeCoins(TreeNode root) {
        if(root==null){
            return 0;
        }
        int mleft=dist(root.left);
        int mright=dist(root.right);
        // System.out.println("left: "+mleft+" right: "+mright);
        // System.out.println("cur: "+root.val);
        move+=Math.abs(mleft)+Math.abs(mright);
        return move;
    }
    
    private int dist(TreeNode root){
        if(root==null){
            return 0;
        }
        int mleft=dist(root.left);
        int mright=dist(root.right);
        // System.out.println("left: "+mleft+" right: "+mright);
        // System.out.println("cur: "+root.val);
        // System.out.println("return "+(mleft+mright+root.val-1));
        move+=Math.abs(mleft)+Math.abs(mright);
        // System.out.println("move "+move);
        return mleft+mright+root.val-1;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Distribute Coins in Binary Tree.
Memory Usage: 37.6 MB, less than 100.00% of Java online submissions for Distribute Coins in Binary Tree.

I'm surprised this actually works.