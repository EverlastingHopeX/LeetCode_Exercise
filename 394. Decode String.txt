Didn't work it out. Completed based on other's solution.
class Solution {
    public String decodeString(String s) {
        Stack<Integer> intStack=new Stack<Integer>();
        Stack<StringBuilder> strStack=new Stack<StringBuilder>();
        StringBuilder sb=new StringBuilder();
        int num=0;
        for(char c:s.toCharArray()){
            if(Character.isDigit(c)){
                num=num*10+(c-'0');
            }
            else if(c=='['){
                intStack.push(num);
                strStack.push(sb);
                sb=new StringBuilder();
                num=0;
            }
            else if(c==']'){
                StringBuilder tmp=sb;
                sb=strStack.pop();
                num=intStack.pop();
                for(int i=0;i<num;i++){
                    sb.append(tmp);
                }
                num=0;
            }
            else{
                sb.append(c);
            }
        }
        return sb.toString();
    }
}

Runtime: 1 ms, faster than 70.18% of Java online submissions for Decode String.
Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Decode String.

Other's solution.
https://leetcode.com/problems/decode-string/discuss/87534/Simple-Java-Solution-using-Stack