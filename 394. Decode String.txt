Didn't work it out. Completed based on other's solution.
class Solution {
    public String decodeString(String s) {
        Stack<Integer> intStack=new Stack<Integer>();
        Stack<StringBuilder> strStack=new Stack<StringBuilder>();
        StringBuilder sb=new StringBuilder();
        int num=0;
        for(char c:s.toCharArray()){
            if(Character.isDigit(c)){
                num=num*10+(c-'0');
            }
            else if(c=='['){
                intStack.push(num);
                strStack.push(sb);
                sb=new StringBuilder();
                num=0;
            }
            else if(c==']'){
                StringBuilder tmp=sb;
                sb=strStack.pop();
                num=intStack.pop();
                for(int i=0;i<num;i++){
                    sb.append(tmp);
                }
                num=0;
            }
            else{
                sb.append(c);
            }
        }
        return sb.toString();
    }
}

Runtime: 1 ms, faster than 70.18% of Java online submissions for Decode String.
Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Decode String.

Other's solution.
https://leetcode.com/problems/decode-string/discuss/87534/Simple-Java-Solution-using-Stack

class Solution {
    public String decodeString(String s) {
        StringBuilder sb=new StringBuilder("");
        int p=0;
        decode(s.toCharArray(),0,sb);
        return sb.toString();
    }
    
    private int decode(char[] chArr, int start,StringBuilder sb){
        // System.out.println("decode "+start);
        int p=start;
        while(p<chArr.length){
            char ch=chArr[p];
            // System.out.println(p+" "+ch);
            //letter
            if(ch>='a' && ch<='z'){
                sb.append(ch);
            }
            //bracket
            else if(ch==']'){
                break;
            }
            //digit
            else{
                StringBuilder tsb=new StringBuilder("");
                int k=0;
                while(chArr[p]>='0' && chArr[p]<='9'){
                    k=k*10+chArr[p]-'0';
                    p++;
                }
                // System.out.println("k "+k);
                p=decode(chArr,p+1,tsb);
                String s=tsb.toString();
                for(int i=0;i<k;i++){
                    sb.append(s);
                }
            }
            p++;
        }
        // System.out.println("end "+p);
        return p;
    }
}

Runtime: 0 ms
Memory Usage: 37.2 MB

Recursive.