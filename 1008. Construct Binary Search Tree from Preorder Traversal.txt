/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        if(preorder.length==0){
            return null;
        }
        TreeNode root=new TreeNode(preorder[0]);
        if(preorder.length==1){
            return root;
        }
        int i=1;
        while(i<preorder.length && preorder[i]<root.val){
            i++;
        }
        root.left=bstFromPreorder(Arrays.copyOfRange(preorder, 1,i));
        root.right=bstFromPreorder(Arrays.copyOfRange(preorder,i,preorder.length));
        return root;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Construct Binary Search Tree from Preorder Traversal.
Memory Usage: 35.9 MB, less than 100.00% of Java online submissions for Construct Binary Search Tree from Preorder Traversal.
