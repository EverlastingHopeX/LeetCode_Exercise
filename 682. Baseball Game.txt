class Solution {
    public int calPoints(String[] ops) {
        int sum=0;
        for(int i=0;i<ops.length;i++){
            // System.out.println(i+" "+ops[i]);
            if(ops[i].equals("C")){
                int prev=findPrev(ops,i);
                int t=Integer.parseInt(ops[prev]);
                ops[prev]=null;
                ops[i]=null;
                sum-=t;
            }
            else if(ops[i].equals("D")){
                int prev=findPrev(ops,i);
                int t=2*Integer.parseInt(ops[prev]);
                ops[i]=t+"";
                sum+=t;
            }
            else if(ops[i].equals("+")){
                int p1=findPrev(ops,i);
                int p2=findPrev(ops,p1);
                int t=Integer.parseInt(ops[p1])+Integer.parseInt(ops[p2]);
                ops[i]=t+"";
                sum+=t;
            }
            else{
                sum+=Integer.parseInt(ops[i]);
            }
            // System.out.println("after "+ops[i]);
            // System.out.println(sum);
        }
        return sum;
    }
    
    private int findPrev(String[] ops, int i){
        int prev=i-1;
        while(prev>=0 && ops[prev]==null){
            prev--;
        }
        return prev;
    }
}

Runtime: 9 ms, faster than 7.82% of Java online submissions for Baseball Game.
Memory Usage: 38.9 MB, less than 63.54% of Java online submissions for Baseball Game.

Using a list can improve time but cost more space.