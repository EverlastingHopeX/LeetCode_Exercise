class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] notFound=new int[]{-1,-1};
        if(nums.length==0){
            return notFound;
        }
        int left=0;
        int right=nums.length-1;
        int mid=left+(right-left)/2;
        while(left<right){
            mid=left+(right-left)/2;
            System.out.println(mid);
            if(nums[mid]<target){
                left=mid+1;
            }
            else if(nums[mid]>target){
                right=mid-1;
            }
            else{
                return expand(nums,mid);
            }
        }
        if(nums[left]!=target){
            return notFound;
        }
        return expand(nums,left);
    }
    
    private int[] expand(int[] nums, int idx){
        int[] ans=new int[]{-1,-1};
        int p=idx;
        while(p>=0 && nums[p]==nums[idx]){
            p--;
        }
        ans[0]=p+1;
        p=idx;
        while(p<nums.length && nums[p]==nums[idx]){
            p++;
        }
        ans[1]=p-1;
        return ans;
    }
}

Runtime: 2 ms, faster than 5.68% of Java online submissions for Find First and Last Position of Element in Sorted Array.
Memory Usage: 42.6 MB, less than 100.00% of Java online submissions for Find First and Last Position of Element in Sorted Array.

the expand can be improved using binary search as well.
However, there is another algorithm to find left and right with 2 binary search.
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14699/Clean-iterative-solution-with-two-binary-searches-(with-explanation)