class Solution {
    int depth=0;
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length==0){
            return 0;
        }
        List<int[]> nextLevel=new ArrayList<int[]>();
        //sort by start time
        Arrays.sort(intervals,(in1,in2)->(in1[0]-in2[0]));
        // for(int[] in:intervals){
        //     System.out.println(in[0]+"-"+in[1]);
        // }
        for(int i=0;i<intervals.length-1;i++){
            if(intervals[i][1]>intervals[i+1][0]){
                nextLevel.add(new int[]{intervals[i+1][0],intervals[i][1]});
            }
        }
        depth++;
        minMeetingRooms(nextLevel.toArray(new int[nextLevel.size()][2]));
        return depth;
    }
}

Runtime: 7 ms, faster than 68.52% of Java online submissions for Meeting Rooms II.
Memory Usage: 40.7 MB, less than 7.69% of Java online submissions for Meeting Rooms II

It's accepted but I'm still confused.
I post a question, I wish someone can deal with it.
https://leetcode.com/problems/meeting-rooms-ii/discuss/452995/Java-AC-Recursive-but-why