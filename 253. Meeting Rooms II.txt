class Solution {
    int depth=0;
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length==0){
            return 0;
        }
        List<int[]> nextLevel=new ArrayList<int[]>();
        //sort by start time
        Arrays.sort(intervals,(in1,in2)->(in1[0]-in2[0]));
        // for(int[] in:intervals){
        //     System.out.println(in[0]+"-"+in[1]);
        // }
        for(int i=0;i<intervals.length-1;i++){
            if(intervals[i][1]>intervals[i+1][0]){
                nextLevel.add(new int[]{intervals[i+1][0],intervals[i][1]});
            }
        }
        depth++;
        minMeetingRooms(nextLevel.toArray(new int[nextLevel.size()][2]));
        return depth;
    }
}

Runtime: 7 ms, faster than 68.52% of Java online submissions for Meeting Rooms II.
Memory Usage: 40.7 MB, less than 7.69% of Java online submissions for Meeting Rooms II

It's accepted but I'm still confused.
I post a question, I wish someone can deal with it.
https://leetcode.com/problems/meeting-rooms-ii/discuss/452995/Java-AC-Recursive-but-why

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals == null || intervals.length==0){
            return 0;
        }
        int[] rooms=new int[intervals.length];
        Arrays.fill(rooms,-1);
        Arrays.sort(intervals,(o1,o2)->(o1[0]-o2[0]));
        for(int i=0;i<intervals.length;i++){
            for(int j=0;j<rooms.length;j++){
                if(rooms[j]<=intervals[i][0]){
                    rooms[j]=intervals[i][1];
                    break;
                }
            }
        }
        int k=0;
        while(k<rooms.length && rooms[k]!=-1){
            k++;
        }
        return k;
    }
}

Runtime: 7 ms, faster than 45.49% of Java online submissions for Meeting Rooms II.
Memory Usage: 39.7 MB, less than 28.92% of Java online submissions for Meeting Rooms II.

I learned the interval coloring algorithm in the algorithm course, however, I don't remember what the professor said about it.
So I ended up with this solution, which is O(N^2), in the worst case which all intervals are overlapped with each other, it would be 1+2+...+n=(n^2+n)/2.
However, by using priorityqueue to store the rooms instead of an int array, we can get the avaiable room in O(1) time, and maintaining this priorityqueue will cost O(logN) for each interval. So it is O(NlogN), which is the algorithm given by the professor.
