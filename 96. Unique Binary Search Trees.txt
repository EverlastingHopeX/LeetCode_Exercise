class Solution {
    public int numTrees(int n) {
        int []dp=new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<i;j++){
                // System.out.println(j+":"+(i-1-j));
                dp[i]+=dp[j]*dp[i-1-j];
            }
            // System.out.println(dp[i]);
        }
        return dp[n];
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Unique Binary Search Trees.
Memory Usage: 33.2 MB, less than 5.55% of Java online submissions for Unique Binary Search Trees.

learned from other's solution.
First pick one node j from sequence, and make it root, then its left is subtree built with j-1 nodes and right is subtree built with i-j-1 nodes.
So dp[i]=sum(dp[j]*dp[i-j-1]), 0<=j<i
https://leetcode.com/problems/unique-binary-search-trees/discuss/31666/DP-Solution-in-6-lines-with-explanation.-F(i-n)-G(i-1)-*-G(n-i)