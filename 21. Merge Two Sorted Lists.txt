/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode fst=l1;
        ListNode snd=l2;
        ListNode dummy=new ListNode(-1);
        ListNode cur=dummy;
        while(fst!=null && snd!=null){
            if(fst.val<snd.val){
                cur.next=fst;
                fst=fst.next;
            }
            else{
                cur.next=snd;
                snd=snd.next;
            }
            cur=cur.next;
        }
        cur.next=fst==null?snd:fst;
        return dummy.next;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Two Sorted Lists.
Memory Usage: 39.7 MB, less than 16.16% of Java online submissions for Merge Two Sorted Lists.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode();
        ListNode cur=dummy;
        while(l1!=null && l2!=null){
            // System.out.println("cur "+cur.val);
            if(l1.val<l2.val){
                cur.next=l1;
                l1=l1.next;
            }
            else{
                cur.next=l2;
                l2=l2.next;
            }
            cur=cur.next;
        }
        while(l1!=null){
            cur.next=l1;
            l1=l1.next;
            cur=cur.next;
        }
        while(l2!=null){
            cur.next=l2;
            l2=l2.next;
            cur=cur.next;
        }
        return dummy.next;
    }
}

Not much difference compared with the first round. Save a little space but using l1, l2, but also spend more time going through the tail of l1 or l2.