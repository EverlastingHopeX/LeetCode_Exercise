class Solution {
    public String mostCommonWord(String paragraph, String[] banned) {
        Map<String,Integer> freq=new HashMap<String, Integer>();
        Set<String> banwords=new HashSet<String>();
        for(String b:banned){
            banwords.add(b);
        }
        for(String rword:paragraph.split("\\W")){
            String wd=rword.replaceAll("[^a-zA-Z]", "");
            wd=wd.toLowerCase();
            if(wd.length()==0 || banwords.contains(wd)){
                continue;
            }
            if(freq.containsKey(wd)){
                freq.put(wd,freq.get(wd)+1);
            }
            else{
                freq.put(wd,1);
            }
        }
        List<Map.Entry<String,Integer>> list=new ArrayList<Map.Entry<String,Integer>>();
        list.addAll(freq.entrySet());
        Collections.sort(list,(o1,o2)->(o2.getValue()-o1.getValue()));
        // for(Map.Entry<String,Integer> entry:list){
        //     System.out.println(entry.getKey()+" : "+entry.getValue());
        // }
        return list.get(0).getKey();
    }
}

Runtime: 49 ms, faster than 7.62% of Java online submissions for Most Common Word.
Memory Usage: 37.1 MB, less than 72.73% of Java online submissions for Most Common Word.

Other's solution with the same idea but more concise and better
performance.
https://leetcode.com/problems/most-common-word/discuss/123854/C%2B%2BJavaPython-Easy-Solution-with-Explanation