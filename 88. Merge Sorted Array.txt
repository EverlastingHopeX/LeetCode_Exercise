class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1=0, p2=0;
        int[] temp=new int[m+n];
        int k=0;
        while(k<temp.length){
            if(p1==m || p2==n){
                break;
            }
            if(nums1[p1]<nums2[p2]){
                temp[k]=nums1[p1++];
            }
            else{
                temp[k]=nums2[p2++];
            }
            k++;
        }
        if(p1==m){
            while(k<temp.length){
                temp[k++]=nums2[p2++];
            }
        }
        else{
            while(k<temp.length){
                temp[k++]=nums1[p1++];
            }
        }
        for(int i=0;i<m+n;i++){
            nums1[i]=temp[i];
        }
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Sorted Array.
Memory Usage: 40.1 MB, less than 5.94% of Java online submissions for Merge Sorted Array.

This solution did not satisfy the hidden requirement that we should do this in-place. 

Other's solution to solve this in-place by merging from the end. Really surprises me that people can solve this simple problem with such impressive idea while I am too lazy to think about it.
https://leetcode.com/problems/merge-sorted-array/discuss/29704/My-clean-java-solution