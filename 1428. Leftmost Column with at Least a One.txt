/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface BinaryMatrix {
 *     public int get(int row, int col) {}
 *     public List<Integer> dimensions {}
 * };
 */

class Solution {
    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {
        List<Integer> di=binaryMatrix.dimensions();
        int R=di.get(0),C=di.get(1);
        // System.out.println("R "+R+" C "+C);
        int left=0,right=C;
        for(int i=0;i<R;i++){
            right=biSearch(binaryMatrix,i,left,right);
            if(right==0){
                return 0;
            }
        }
        // System.out.println("final "+right);
        return right==C?-1:right;
    }
    
    private int biSearch(BinaryMatrix bm, int r, int left, int right){
        // System.out.println(r+" : "+left+" "+right);
        if(0 == bm.get(r,right-1)){
            return right;
        }
        while(left<right){
            int mid=left+(right-left)/2;
            if(bm.get(r,mid)==0){
                left=mid+1;
            }
            else{
                right=mid;
            }
        }
        // System.out.println("return "+right);
        return right;
    }
}

Runtime: 1 ms, faster than 22.75% of Java online submissions for Leftmost Column with at Least a One.
Memory Usage: 45.3 MB, less than 5.08% of Java online submissions for Leftmost Column with at Least a One.

Typical binary search.
