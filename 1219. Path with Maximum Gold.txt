class Solution {    
    public int getMaximumGold(int[][] grid) {
        int max=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==0){
                    continue;
                }
                Set<String> visited=new HashSet<>();
                max=Math.max(max,DFS(grid,i,j,0,visited));
            }
        }
        return max;
    }
    
    int[][] dirs=new int[][]{{-1,0},{0,-1},{1,0},{0,1}};
    
    private int DFS(int[][] grid, int r, int c, int sum, Set<String> visited){
        sum+=grid[r][c];
        visited.add(r+","+c);
        int max=0;
        for(int[] d:dirs){
            int rr=r+d[0];
            int cc=c+d[1];
            if(rr<0 || rr>=grid.length||cc<0||cc>=grid[0].length){
                continue;
            }
            if(grid[r][c]==0 || visited.contains(rr+","+cc)){
                continue;
            }
            max=Math.max(max,DFS(grid,rr,cc,sum,visited));
        }
        visited.remove(r+","+c);
        return max+grid[r][c];
    }
}

Runtime: 417 ms, faster than 5.03% of Java online submissions for Path with Maximum Gold.
Memory Usage: 39.9 MB, less than 5.01% of Java online submissions for Path with Maximum Gold.

The brute force DFS solution is easy to come up with.
A improvement is that by setting the grid to 0 instead of using set to memorize the visited places. 

The performance after improvement.

Runtime: 20 ms, faster than 56.06% of Java online submissions for Path with Maximum Gold.
Memory Usage: 37 MB, less than 58.09% of Java online submissions for Path with Maximum Gold.