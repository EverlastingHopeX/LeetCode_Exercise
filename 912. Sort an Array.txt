quick sort
class Solution {
    public int[] sortArray(int[] nums) {
        quicksort(nums,0,nums.length-1);
        return nums;
    }
    
    private void quicksort(int[] nums, int low, int high){
        System.out.println(low+"-"+high);
        if(low>=high){
            return;
        }
        int mid=nums[low];
        int slow=low+1, fast=low+1;
        while(fast<=high){
            // System.out.println("fast:"+fast+" "+nums[fast]);
            if(nums[fast]<mid){
                exch(nums,fast,slow);
                slow++;
            }
            fast++;
        }
        exch(nums,low,slow-1);
        // for(int i=low;i<=high;i++){
        //     System.out.println(nums[i]);
        // }
        quicksort(nums,low,slow-2);
        quicksort(nums,slow,high);
    }
    
    private void exch(int[] nums, int i, int j){
        int t=nums[i];
        nums[i]=nums[j];
        nums[j]=t;
    }
}

Runtime: 248 ms, faster than 8.35% of Java online submissions for Sort an Array.
Memory Usage: 73.6 MB, less than 6.12% of Java online submissions for Sort an Array.

merge sort
class Solution {
    public int[] sortArray(int[] nums) {
        mergesort(nums,0,nums.length-1);
        return nums;
    }
    
    private void mergesort(int[] nums, int low, int high){
        if(low>=high){
            return;
        }
        int mid=(low+high)/2;
        mergesort(nums,low,mid);
        mergesort(nums,mid+1,high);
        merge(nums,low,high);
    }
    
    private void merge(int[] nums, int low, int high){
        // System.out.println(low+"-"+high);
        int mid=(low+high)/2;
        int[] temp=new int[high-low+1];
        int form=low;
        int latt=mid+1;
        int t=0;
        while(form<=mid && latt<=high){
            if(nums[form]<nums[latt]){
                temp[t]=nums[form];
                t++;
                form++;
            }
            else{
                temp[t]=nums[latt];
                t++;
                latt++;
            }
        }
        while(form<=mid){
            temp[t]=nums[form];
            t++;
            form++;
        }
        while(latt<=high){
            temp[t]=nums[latt];
            t++;
            latt++;
        }
        for(int i=0;i<high-low+1;i++){
            nums[low+i]=temp[i];
            // System.out.println((low+i)+nums[low+i]);
        }
    }
}

Runtime: 9 ms, faster than 29.14% of Java online submissions for Sort an Array.
Memory Usage: 46.3 MB, less than 28.57% of Java online submissions for Sort an Array.