/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    Map<Integer,Integer> depthMap=new HashMap<>();
    int depth=0;
    
    public int depthSumInverse(List<NestedInteger> nestedList) {
        findDepth(nestedList,0);
        depth++;
        // System.out.println("total depth "+depth);
        int sum=0;
        for(int d:depthMap.keySet()){
            sum+=(depth-d)*depthMap.get(d);
        }
        return sum;
    }
    
    private void findDepth(List<NestedInteger> nestedList, int d){
        int sum=0;
        for(NestedInteger ni:nestedList){
            if(ni.isInteger()){
                sum+=ni.getInteger();
            }
            else{
                findDepth(ni.getList(),d+1);
            }
        }
        // System.out.println("depth "+d+" add "+sum);
        int t=depthMap.getOrDefault(d,0);
        depthMap.put(d,t+sum);
        depth=Math.max(depth,d);
    }
    
}

Runtime: 1 ms, faster than 64.75% of Java online submissions for Nested List Weight Sum II.
Memory Usage: 36.9 MB, less than 84.90% of Java online submissions for Nested List Weight Sum II.

I thought the depth means the depth of the sub tree of this node, but it is just based on the depth of whole tree, which makes this problem easier.