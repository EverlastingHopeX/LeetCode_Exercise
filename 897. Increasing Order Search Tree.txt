/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode increasingBST(TreeNode root) {
        Stack<TreeNode> stack=new Stack<TreeNode>();
        TreeNode cur=root;
        TreeNode dummy=new TreeNode(0);
        TreeNode n=dummy;
        while(cur!=null || !stack.empty()){
            while(cur!=null){
                stack.push(cur);
                cur=cur.left;
            }
            cur=stack.pop();
            n.right=new TreeNode(cur.val);
            n=n.right;
            cur=cur.right;
        }
        return dummy.right;
    }
}

Runtime: 4 ms, faster than 29.09% of Java online submissions for Increasing Order Search Tree.
Memory Usage: 45.5 MB, less than 12.50% of Java online submissions for Increasing Order Search Tree.

Other's recursive solution.
https://leetcode.com/problems/increasing-order-search-tree/discuss/165885/C%2B%2BJavaPython-Self-Explained-5-line-O(N)