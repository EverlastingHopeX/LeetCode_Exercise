class Solution {
    public boolean exist(char[][] board, String word) {
        boolean ans=false;
        boolean[][] visited=new boolean[board.length][board[0].length];
        for(int i=0;i<board.length && !ans;i++){
            for(int j=0;j<board[0].length && !ans;j++){
                ans=DFS(board,word,i,j,visited);
            }
        }
        return ans;
    }
    
    public boolean DFS(char[][] board, String word, int x, int y, boolean[][] visited){
        // System.out.println("x,y:"+x+","+y);
        // System.out.println(word);
        if(word.length()==0){
            return true;
        }
        if(x<0 || x>=board.length || y<0 || y >= board[0].length || word.charAt(0) != board[x][y] || visited[x][y]){
            return false;
        }
        visited[x][y]=true;
        boolean ans=false;
        if(DFS(board,word.substring(1), x-1,y,visited) || DFS(board,word.substring(1),x+1,y,visited) || DFS(board,word.substring(1),x,y-1,visited) || DFS(board,word.substring(1),x,y+1,visited)){
            return true;
        }
        visited[x][y]=false;
        return false;
    }
}

Runtime: 16 ms, faster than 16.24% of Java online submissions for Word Search.
Memory Usage: 43.7 MB, less than 17.27% of Java online submissions for Word Search.


