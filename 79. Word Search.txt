class Solution {
    public boolean exist(char[][] board, String word) {
        boolean ans=false;
        boolean[][] visited=new boolean[board.length][board[0].length];
        for(int i=0;i<board.length && !ans;i++){
            for(int j=0;j<board[0].length && !ans;j++){
                ans=DFS(board,word,i,j,visited);
            }
        }
        return ans;
    }
    
    public boolean DFS(char[][] board, String word, int x, int y, boolean[][] visited){
        // System.out.println("x,y:"+x+","+y);
        // System.out.println(word);
        if(word.length()==0){
            return true;
        }
        if(x<0 || x>=board.length || y<0 || y >= board[0].length || word.charAt(0) != board[x][y] || visited[x][y]){
            return false;
        }
        visited[x][y]=true;
        boolean ans=false;
        if(DFS(board,word.substring(1), x-1,y,visited) || DFS(board,word.substring(1),x+1,y,visited) || DFS(board,word.substring(1),x,y-1,visited) || DFS(board,word.substring(1),x,y+1,visited)){
            return true;
        }
        visited[x][y]=false;
        return false;
    }
}

Runtime: 16 ms, faster than 16.24% of Java online submissions for Word Search.
Memory Usage: 43.7 MB, less than 17.27% of Java online submissions for Word Search.


class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                // System.out.println(i+" "+j+" "+board[i][j]);
                if(board[i][j]==word.charAt(0)){
                    char tmp=board[i][j];
                    board[i][j]='/';
                    boolean found=DFS(board,i,j,word,0);
                    if(found){
                        return true;
                    }
                    // System.out.println("not found");
                    board[i][j]=tmp;
                }
            }
        }
        return false;
    }
    
    private boolean DFS(char[][] board, int r, int c, String word, int idx){
        // System.out.println(r+" "+c+" "+idx);
        if(idx==word.length()-1){
            return true;
        }
        int[][] dirs=new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        for(int[] d:dirs){
            int nr=r+d[0];
            int nc=c+d[1];
            //out of range
            if(nr<0 || nr>=board.length || nc<0 || nc>=board[0].length){
                continue;
            }
            if(board[nr][nc]!=word.charAt(idx+1)){
                continue;
            }
            char tmp=board[nr][nc];
            board[nr][nc]='/';
            boolean found=DFS(board,nr,nc,word,idx+1);
            board[nr][nc]=tmp;
            if(found){
                return true;
            }
        }
        return false;
    }
}

Runtime: 8 ms, faster than 52.76% of Java online submissions for Word Search.
Memory Usage: 40.3 MB, less than 91.74% of Java online submissions for Word Search.

Similar idea as my previous solution, except I mark the visited position by altering its character in board instead of creating another array visited.

The time complexity is O(R^2*C^2), considering we have to call DFS() at every position and every DFS() need to traverse every element.