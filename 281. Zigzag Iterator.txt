public class ZigzagIterator {
    List<Iterator<Integer>> itList;
    int pos;
    int cnt;
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        itList=new ArrayList<>();
        if(v1.size()>0){
            itList.add(v1.iterator());
        }
        if(v2.size()>0){
            itList.add(v2.iterator());
        }
        cnt=itList.size();
        pos=0;
    }

    public int next() {
        // System.out.println("next ");
        for(int i=0;i<itList.size();i++){
            Iterator<Integer> it=itList.get(pos);
            pos++;
            if(pos>=itList.size()){
                pos=0;
            }
            if(it.hasNext()){
                int t=it.next();
                if(!it.hasNext()){
                    cnt--;
                }
                return t;
            }
        }
        return -1;
    }

    public boolean hasNext() {
        // System.out.println("hasNext "+cnt);
        return cnt!=0;
    }
}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */

Runtime: 2 ms, faster than 64.73% of Java online submissions for Zigzag Iterator.
Memory Usage: 39.7 MB, less than 81.51% of Java online submissions for Zigzag Iterator.

scalable.