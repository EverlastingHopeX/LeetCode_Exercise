/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> ans=new ArrayList<Integer>();
        if(K==0){
            ans.add(target.val);
            return ans;
        }
        Map<Integer,List<Integer>> adjMap=new HashMap<>();
        DFS(adjMap,root);
        Queue<Integer> frontier=new LinkedList<Integer>();
        Set<Integer> visited=new HashSet<Integer>();
        frontier.offer(target.val);
        for(int i=0;i<K;i++){
            int size=frontier.size();
            System.out.println();
            for(int j=0;j<size;j++){
                int cur=frontier.poll();
                // System.out.print(cur+" ");
                visited.add(cur);
                if(!adjMap.containsKey(cur)){
                    continue;
                }
                for(int next:adjMap.get(cur)){
                    if(!visited.contains(next)){
                        frontier.offer(next);
                    }
                }
            }
        }
        // List<Integer> ans=new ArrayList<Integer>();
        ans.addAll(frontier);
        return ans;
    }
    
    private void DFS(Map<Integer, List<Integer>> adjMap, TreeNode root){
        // System.out.println("DFS "+root.val);
        if(root==null){
            return;
        }
        int src=root.val;
        if(root.left!=null){
            int tgt=root.left.val;
            List<Integer> list=adjMap.getOrDefault(src, new ArrayList<Integer>());
            list.add(tgt);
            adjMap.put(src,list);
            list=adjMap.getOrDefault(tgt, new ArrayList<Integer>());
            list.add(src);
            adjMap.put(tgt,list);
            DFS(adjMap,root.left);
        }
        if(root.right!=null){
            int tgt=root.right.val;
            List<Integer> list=adjMap.getOrDefault(src, new ArrayList<Integer>());
            list.add(tgt);
            adjMap.put(src,list);
            list=adjMap.getOrDefault(tgt, new ArrayList<Integer>());
            list.add(src);
            adjMap.put(tgt,list);
            DFS(adjMap,root.right);
        }
    }
}

Runtime: 8 ms, faster than 5.09% of Java online submissions for All Nodes Distance K in Binary Tree.
Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for All Nodes Distance K in Binary Tree.

This solution use graph and BFS.

Other's solution using similar idea.
Adding extra parent pointer to node is also a good idea.
https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/discuss/143752/JAVA-Graph-%2B-BFS
