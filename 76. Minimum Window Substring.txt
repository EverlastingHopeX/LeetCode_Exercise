class Solution {
    class Freq{
        //negative: number of char missing
        //positive: number of char found
        //null: not in T
        private Integer[] freq;
        private int res;
        Freq(String t){
            // System.out.println("Freq init");
            freq=new Integer[52];
            for(char ch:t.toCharArray()){
                int idx=toInt(ch);
                if(freq[idx]==null){
                    freq[idx]=new Integer(-1);
                }
                else{
                    freq[idx]=freq[idx]-1;
                }
                // System.out.println(ch+" "+idx+" "+freq[idx]);
            }
            res=t.length();
        }
        
        public boolean isCovered(){return res==0;}
        
        public void Add(char ch){
            int idx=toInt(ch);
            Integer cnt=freq[idx];
            if(cnt!=null){
                // System.out.println("Add "+idx+" "+ch);
                if(cnt<0){
                    res--;
                }
                freq[idx]=cnt+1;
                // System.out.println(cnt+" "+freq[idx]);
            }
            // System.out.println("res "+res);
        }
        
        public void Remove(char ch){
            int idx=toInt(ch);
            Integer cnt=freq[idx];
            if(cnt != null){
                // System.out.println("Remove "+idx+" "+ch);
                if(cnt<=0){
                    res++;
                }
                freq[idx]=cnt-1;
                // System.out.println(cnt+" "+freq[idx]);
            }
            // System.out.println("res "+res);
        }
    }
    
    public String minWindow(String s, String t) {
        if(t.length()==0){
            return "";
        }
        Freq freqObj=new Freq(t);
        int right=0;
        while(right<s.length() && !freqObj.isCovered()){
            freqObj.Add(s.charAt(right++));
        }
        // System.out.println("init complete "+right);
        if(!freqObj.isCovered()){
            return "";
        }
        int left=0;
        int start=0;
        //shrink
        // System.out.println("shrink");
        if(freqObj.isCovered()){
            while(freqObj.isCovered()){
                freqObj.Remove(s.charAt(left++));
            }
            freqObj.Add(s.charAt(--left));
        }
        if(freqObj.isCovered()){
            // System.out.println("start "+start+" -> "+left);
            start=left;
        }
        while(right<s.length()){
            // System.out.println("move on");
            freqObj.Remove(s.charAt(left++));
            freqObj.Add(s.charAt(right++));
            //shrink
            // System.out.println("shrink");
            if(freqObj.isCovered()){
                while(freqObj.isCovered()){
                    freqObj.Remove(s.charAt(left++));
                }
                freqObj.Add(s.charAt(--left));
            }
            if(freqObj.isCovered()){
                // System.out.println("start "+start+" -> "+left);
                start=left;
            }
        }
        return s.substring(start,start+(right-left));
    }
    
    private int toInt(char ch){
        if(ch>='a'){
            return ch-'a'+26;
        }
        return ch-'A';
    }
}

Runtime: 6 ms, faster than 76.03% of Java online submissions for Minimum Window Substring.
Memory Usage: 39.4 MB, less than 50.00% of Java online submissions for Minimum Window Substring.

Object-oriented programming can help to organize the thougth and make the code more readable. It is surely not concise but I prefer it to be more readable so I won't modify it for better performance.

My post: https://leetcode.com/problems/minimum-window-substring/discuss/646547/Java-HashMap-%2B-two-pointer-with-explanations

Other's more concise solution.
https://leetcode.com/problems/minimum-window-substring/discuss/26810/Java-solution.-using-two-pointers-%2B-HashMap

I made several stupid mistakes, especially in simple function like toInt(). I guess it is true that no details no success.

class Solution {
    public String minWindow(String s, String t) {
        int start=0;
        int minL=s.length()+1;
        Map<Character,Integer> freq=new HashMap<>();
        for(char ch:t.toCharArray()){
            int cnt=freq.getOrDefault(ch,0);
            freq.put(ch,cnt+1);
        }
        int left=0,right=0;
        int res=t.length();
        while(right<s.length()){
            // System.out.println(left+" "+right+" before expand");
            //expand
            while(right<s.length() && res>0){
                char ch=s.charAt(right);
                // System.out.println(ch);
                if(freq.containsKey(ch)){
                    int cnt=freq.get(ch);
                    // System.out.println("cnt "+cnt);
                    if(cnt>0){
                        // System.out.println("--");
                        res--;
                    }
                    freq.put(ch,cnt-1);
                }
                right++;
            }
            
            // System.out.println(left+" "+right+" before shrink");
            //shrink
            while(left<right && res==0){
                char ch=s.charAt(left);
                // System.out.println(ch);
                if(freq.containsKey(ch)){
                    int cnt=freq.get(ch);
                    // System.out.println("cnt "+cnt);
                    if(cnt>=0){
                        // System.out.println("++");
                        res++;
                    }
                    freq.put(ch,cnt+1);
                }
                left++;
            }
            if(right-left+1<minL){
                minL=right-left+1;
                start=left-1;
            }
            minL=Math.min(minL,right-left+1);
        }
        // System.out.println("start "+start+" length "+minL);
        if(minL>s.length()){
            return "";
        }
        return s.substring(start,start+minL);
    }
}

The performance is slightly slower than the first round. And I use hashmap instead of Integer array this time.
It is more concise and not really less readable. My former solution is actually harder to understand to me now.