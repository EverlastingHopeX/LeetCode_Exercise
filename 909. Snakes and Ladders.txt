A lot of wrong test cases.
There are two notes:

The board square with number 1 has no snake or ladder.
The board square with number N*N has no snake or ladder.

however, there are still test cases connects these two square
with other squares.

class Solution {
    public int snakesAndLadders(int[][] board) {
        int R=board.length;
        int C=board[0].length;
        // List<int[]> shortcuts=new ArrayList<>();
        int size=R*C;
        Map<Integer, Integer> shortcuts=new HashMap<Integer, Integer>();
        boolean oddRow=true;
        for(int i=R-1;i>=0;i--){
            int r=R-1-i;
            if(oddRow){
                for(int j=0;j<C;j++){
                    int idx=r*R+j+1;
                    // System.out.println(idx);
                    if(board[i][j]>1 && board[i][j]<size){
                        // shortcuts.add(new int[]{idx,board[i][j]});
                        shortcuts.put(idx-1,board[i][j]);
                    }
                }
                oddRow=false;
            }
            else{
                // System.out.println("even "+r);
                for(int j=C-1;j>=0;j--){
                    int idx=(r+1)*R-j;
                    // System.out.println(idx);
                    if(board[i][j]>1 && board[i][j]<size){
                        // shortcuts.add(new int[]{idx,board[i][j]});
                        shortcuts.put(idx-1,board[i][j]);
                    }
                }
                oddRow=true;
            }
        }
        int move=0;
        // int size=R*C;
        int[] minMove=new int[size];
        for(int i=1;i<size;i++){
            // System.out.println("before: "+minMove[i]);
            int min=minMove[i-1];
            for(int j=2;i-j>=0 && j<7;j++){
                // System.out.println("  "+(i-j)+": "+minMove[i-j]);
                if(minMove[i-j]<min){
                    min=minMove[i-j];
                }
            }
            // System.out.println("min: "+min);
            if(minMove[i]==0 || minMove[i]>min+1){
                minMove[i]=min+1;
            }
            if(shortcuts.containsKey(i)){
                int tgt=shortcuts.get(i)-1;
                minMove[tgt]=minMove[i];
                // System.out.println("set "+tgt);
            }
            // System.out.println(i+": "+minMove[i]);
            // System.out.println(minMove[0]);
        }
        return minMove[size-1];
    }
}