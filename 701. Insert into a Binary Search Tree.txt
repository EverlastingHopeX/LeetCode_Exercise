/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null){
            return new TreeNode(val);
        }
        helper(root,val);
        return root;
    }
    
    private void helper(TreeNode cur, int val){
        if(cur.val<val){
            if(cur.right==null){
                cur.right=new TreeNode(val);
            }
            else{
                helper(cur.right,val);
            }
        }
        else{
            if(cur.left==null){
                cur.left=new TreeNode(val);
            }
            else{
                helper(cur.left,val);
            }
            
        }
    }
}

Runtime: 0 ms	92.89%
Memory Usage: 39.7 MB

Pretty easy if do this recursively.