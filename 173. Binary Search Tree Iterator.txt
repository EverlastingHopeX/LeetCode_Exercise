/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
    Stack<TreeNode> stack;
    
    public BSTIterator(TreeNode root) {
        stack=new Stack<TreeNode>();
        TreeNode cur=root;
        while(cur!=null){
            // System.out.println(cur.val);
            // if(cur.right!=null){
            //     stack.push(cur.right);
            //     System.out.println("push: "+cur.right.val);
            // }
            stack.push(cur);
            // System.out.println("push: "+cur.val);
            cur=cur.left;
        }
    }
    
    /** @return the next smallest number */
    public int next() {
        TreeNode cur=stack.pop();
        // System.out.println("pop: "+cur.val);
        int res=cur.val;
        cur=cur.right;
        // if(cur.right!=null){
        //     stack.push(cur.right);
        //     System.out.println("push: "+cur.right.val);
        // }
        while(cur!=null){
            // System.out.println(cur.val);
            stack.push(cur);
            // System.out.println("push: "+cur.val);
            cur=cur.left;
        }
        return res;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        // System.out.println(stack.size());
        return !stack.empty();
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */

Runtime: 17 ms, faster than 99.47% of Java online submissions for Binary Search Tree Iterator.
Memory Usage: 49.9 MB, less than 93.83% of Java online submissions for Binary Search Tree Iterator.

class BSTIterator {
    int min;
    Stack<TreeNode> st;
    public BSTIterator(TreeNode root) {
        TreeNode cur=root;
        st=new Stack<>();
        while(cur!=null){
            min=cur.val;
            st.push(cur);
            cur=cur.left;
        }
    }
    
    public int next() {
        TreeNode t=st.peek();
        // System.out.println("peek "+t.val);
        //left is visited
        if(t.left==null || t.left.val<=min ){
            //visited current
            st.pop();
            // System.out.println("pop "+t.val);
            min=t.val;
            //traverse right
            if(t.right!=null){
                st.push(t.right);
                // System.out.println("push "+t.right.val);
            }
        }
        else{
            //traverse left
            st.push(t.left);
            // System.out.println("push "+t.left.val);
            return next();
        }
        return min;
    }
    
    public boolean hasNext() {
        return !st.isEmpty();
    }
}

Runtime: 16 ms	40.82%
Memory Usage: 42.9 MB

Similar idea as before, but this time it is a recursive version.
The runtime is also similar, but it needs to be less than 15 ms to beats 100%.