class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            if(nums[i]>0){
                break;
            }
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            for(int j=i+1;j<nums.length;j++){
                if(j>i+1 && nums[j]==nums[j-1]){
                    continue;
                }
                int k=bisearch(nums, j+1, -(nums[i]+nums[j]));
                if(k!=-1){
                    ans.add(Arrays.asList(nums[i],nums[j],nums[k]));
                }
            }
        }
        return ans;
    }
    
    private int bisearch(int[] nums, int start, int target){
        int end=nums.length-1;
        int mid=0;
        while(start<=end){
            mid=(start+end)/2;
            if(nums[mid]<target){
                start=mid+1;
            }
            else if(nums[mid]>target){
                end=mid-1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
}

Runtime: 91 ms, faster than 28.66% of Java online submissions for 3Sum.
Memory Usage: 45.9 MB, less than 96.00% of Java online submissions for 3Sum.

The runtime is not satisfying, however, by changing j and k in the second loop according to the sum rather than using bisearch could improve the performance.

Couldn't work it out in the second round.
Other's O(n^2) solution using 2 pointers.
https://leetcode.com/problems/3sum/discuss/7380/Concise-O(N2)-Java-solution

Solved this by brute force solution. Didn't think up the two pointers solution.
