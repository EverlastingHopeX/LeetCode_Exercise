class Solution {
    public int search(int[] nums, int target) {
        int ll=0;
        int rr=nums.length-1;
        if(rr<0){
            return -1;
        }
        if(nums[ll]<=nums[rr]){
            return bisearch(nums,target,0,nums.length-1);
        }
        int mid=-1;
        while(ll<=rr){
            // System.out.println(ll+" : "+rr);
            mid=ll+(rr-ll)/2;
            if(nums[mid]>=nums[0]){
                ll=mid+1;
            }
            else{
                rr=mid-1;
            }
        }
        // System.out.println(nums[ll]+" "+nums[mid]+" "+nums[rr]);
        // System.out.println(ll+" "+mid+" "+rr);
        if(target>=nums[0]){
            return bisearch(nums,target,0,rr);
        }
        return bisearch(nums,target,ll,nums.length-1);
        // return -1;
    }
    
    private int bisearch(int[] nums, int target,int left, int right){
        // System.out.println("search "+left+", "+right);
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<target){
                left=mid+1;
            }
            else{
                right=mid-1;
            }
        }
        return -1;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array.
Memory Usage: 38.5 MB, less than 44.03% of Java online submissions for Search in Rotated Sorted Array.

Basically the same solution at the second time.
But I forgot to check if the array is totally ordered, which makes the performance slower.
The boundary handling of binary search is pretty hard to figure out perfectly without running.
