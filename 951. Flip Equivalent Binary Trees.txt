/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean flipEquiv(TreeNode root1, TreeNode root2) {
        if(root1==null && root2==null){
            // System.out.println("true");
            return true;
        }
        else if(root1!=null && root2!=null){
            // System.out.println(root1.val+":"+root2.val);
            if(root1.val==root2.val){
                return (flipEquiv(root1.left,root2.left) && flipEquiv(root1.right,root2.right))||(flipEquiv(root1.right,root2.left) && flipEquiv(root1.left,root2.right));
            }
        }
        // System.out.println("false");
        return false;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Flip Equivalent Binary Trees.
Memory Usage: 34.9 MB, less than 100.00% of Java online submissions for Flip Equivalent Binary Trees.