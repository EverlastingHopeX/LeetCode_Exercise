class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<nums.length-3;i++){
            // System.out.println("i "+i);
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            for(int j=i+1;j<nums.length-2;j++){
                // System.out.println("j "+j);
                if(j>i+1 && nums[j]==nums[j-1]){
                    continue;
                }
                int res=target-nums[i]-nums[j];
                int left=j+1;
                int right=nums.length-1;
                while(left<right){
                    if(nums[left]+nums[right]<res){
                        left++;
                    }
                    else if(nums[left]+nums[right]>res){
                        right--;
                    }
                    else{
                        List<Integer> li=new ArrayList<>();
                        li.add(nums[i]);
                        li.add(nums[j]);
                        li.add(nums[left]);
                        li.add(nums[right]);
                        ans.add(li);
                        while(left<right && nums[left]==nums[left+1]){
                            left++;
                        }
                        while(left<right && nums[right]==nums[right-1]){
                            right--;
                        }
                        left++;
                        right--;
                    }
                }
            }
        }
        return ans;
    }
}

Runtime: 9 ms, faster than 87.98% of Java online submissions for 4Sum.
Memory Usage: 39.7 MB, less than 66.67% of Java online submissions for 4Sum.

It seems we only need to add loops to simplify the problem of kSum into 2Sum.