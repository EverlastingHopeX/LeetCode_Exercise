class Solution {
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        if(words1.length!=words2.length){
            return false;
        }
        Map<String,String> map=new HashMap<String,String>();
        for(List<String> pair:pairs){
            String p1=find(map,pair.get(0));
            String p2=find(map,pair.get(1));
            if(!p1.equals(p2)){
                map.put(p1,p2);
            }
        }
        // for(Map.Entry<String,String> entry: map.entrySet()){
        //     System.out.println("("+entry.getKey()+":"+entry.getValue()+")");
        // }
        for(int i=0;i<words1.length;i++){
            if(!words1[i].equals(words2[i]) && !find(map,words1[i]).equals(find(map,words2[i]))){
                System.out.println(words1[i]+":"+words2[i]);
                return false;
            }
        }
        return true;
    }
    private String find(Map<String,String> map, String word){
        if(!map.containsKey(word)){
            map.put(word,word);
        }
        if(map.get(word).equals(word)){
            return word;
        }
        else{
            return find(map, map.get(word));
        }
    }
}

Runtime: 28 ms, faster than 65.12% of Java online submissions for Sentence Similarity II.
Memory Usage: 45.6 MB, less than 28.57% of Java online submissions for Sentence Similarity II.

I tried union find but end up in stack overflow, then I improved it inspired by other's solution.
https://leetcode.com/problems/sentence-similarity-ii/discuss/109752/JavaC%2B%2B-Clean-Code-with-Explanation